Prompt: Analyze the prettymapp repository to understand its structure, purpose, and functionality. Follow these steps to study the codebase:

1. Read the README file to gain an overview of the project, its goals, and any setup instructions.

2. Examine the repository structure to understand how the files and directories are organized.

3. Identify the main entry point of the application (e.g., main.py, app.py, index.js) and start analyzing the code flow from there.

4. Study the dependencies and libraries used in the project to understand the external tools and frameworks being utilized.

5. Analyze the core functionality of the project by examining the key modules, classes, and functions.

6. Look for any configuration files (e.g., config.py, .env) to understand how the project is configured and what settings are available.

7. Investigate any tests or test directories to see how the project ensures code quality and handles different scenarios.

8. Review any documentation or inline comments to gather insights into the codebase and its intended behavior.

9. Identify any potential areas for improvement, optimization, or further exploration based on your analysis.

10. Provide a summary of your findings, including the project's purpose, key features, and any notable observations or recommendations.

Use the files and contents provided below to complete this analysis:

README:
# prettymapp üñºÔ∏è

**Prettymapp is a webapp and Python package to create beautiful maps from OpenStreetMap data**

---
<h3 align="center">
    üéà Try it out here: <a href="https://prettymapp.streamlit.app/">prettymapp on streamlit üéà </a>
</h3>

---



<p align="center">
    <a href="https://prettymapp.streamlit.app/"><img src="./streamlit-prettymapp/example_prints/demo.gif" width=700></a>
</p>

<br>

<table>
    <tr><td><img src="./streamlit-prettymapp/example_prints/macau.png"></td><td><img src="./streamlit-prettymapp/example_prints/barcelona.png"></td></tr>
</table>

## Based on the prettymaps project

Prettymapp is based on a rewrite of the fantastic [prettymaps](https://github.com/marceloprates/prettymaps) project by
[@marceloprates](https://github.com/marceloprates). All credit for the original idea, designs and implementation go to him.
The prettymapp rewrite focuses on speed and adapted configuration to interface with the webapp.
It drops more complex configuration options in favour of improved speed, reduced code complexity and 
simplified configuration interfaces. It is partially tested and adds a [streamlit](https://streamlit.io/) webapp component.

## Running the app locally

```bash
git clone https://github.com/chrieke/prettymapp.git
cd prettymapp
pip install -r streamlit-prettymapp/requirements.txt
streamlit run streamlit-prettymapp/app.py
```

## Python package

You can also use prettymapp without the webapp, directly in Python. This lets you customize the functionality or 
build your own application.

**Installation:**

```bash
pip install prettymapp
```

**Define the area, download and plot the OSM data:**

You can select from 4 [predefined styles](prettymapp/settings.py#L35): `Peach`, `Auburn`, `Citrus` and `Flannel`.

```python
from prettymapp.geo import get_aoi
from prettymapp.osm import get_osm_geometries
from prettymapp.plotting import Plot
from prettymapp.settings import STYLES

aoi = get_aoi(address="Pra√ßa Ferreira do Amaral, Macau", radius=1100, rectangular=False)
df = get_osm_geometries(aoi=aoi)

fig = Plot(
    df=df,
    aoi_bounds=aoi.bounds,
    draw_settings=STYLES["Peach"],
).plot_all()

fig.savefig("map.jpg")
```

You can also plot exported OSM XML files e.g. from openstreetmap.org:

```python
from prettymapp.osm import get_osm_geometries_from_xml

df = get_osm_geometries_from_xml(filepath="Berlin.osm")
aoi_bounds = df.total_bounds
...
```

**Customize styles & layers**

Edit the `draw_settings` input to create your own custom styles! The map layout can be further customized with the additional arguments of the [`Plot`](plotting.py#L36) class (e.g. `shape`, `contour_width` etc.). Check the webapp [examples](streamlit-prettymapp/examples.json) for inspiration.

```python
from prettymapp.settings import STYLES

custom_style = STYLES["Peach"].copy()
custom_style["urban"] = {
    "cmap": ["#3452eb"],
    "ec": "#E9724C",
    "lw": 0.2,
    "zorder": 4,
}

fig = Plot(
    df=df,
    aoi_bounds=aoi.bounds,
    draw_settings=custom_style,
    shape="circle",
    contour_width=0,
).plot_all()

```

You can also customize the selection of OSM landcover classes that should be displayed.

```python
from prettymapp.settings import LANDCOVER_CLASSES

custom_lc_classes = LANDCOVER_CLASSES.copy()
custom_lc_classes["urban"]["building"] = False

df = get_osm_geometries(aoi=aoi, landcover_classes=custom_lc_classes)
```

Repository Structure: prettymapp
/.gitignore
/.streamlit/
/CHANGELOG.md
/Dockerfile
/LICENSE
/Makefile
/README.md
/cache/
/conftest.py
/prettymapp/
/pylintrc
/pyproject.toml
/pytest.ini
/streamlit-prettymapp/
/streamlit-prettymapp/app.py
/streamlit-prettymapp/example_prints/
/streamlit-prettymapp/examples.json
/streamlit-prettymapp/requirements.txt
/streamlit-prettymapp/utils.py
/streamlit-prettymapp/example_prints/barcelona.png
/streamlit-prettymapp/example_prints/barcelona_small.png
/streamlit-prettymapp/example_prints/demo.gif
/streamlit-prettymapp/example_prints/heerhugowaard_small.png
/streamlit-prettymapp/example_prints/macau.png
/streamlit-prettymapp/example_prints/macau_small.png
/streamlit-prettymapp/example_prints/wuerzburg.png
/streamlit-prettymapp/example_prints/w√ºrzburg_small.png
/prettymapp/__init__.py
/prettymapp/example_notebook.ipynb
/prettymapp/fonts/
/prettymapp/geo.py
/prettymapp/osm.py
/prettymapp/plotting.py
/prettymapp/settings.py
/prettymapp/tests/
/prettymapp/tests/__init__.py
/prettymapp/tests/mock_data/
/prettymapp/tests/test_geo.py
/prettymapp/tests/test_main.py
/prettymapp/tests/test_osm.py
/prettymapp/tests/test_plotting.py
/prettymapp/tests/mock_data/df_pre_adjusting.pickle
/prettymapp/tests/mock_data/osm_export_xml.osm
/prettymapp/fonts/PermanentMarker-Regular.ttf
/cache/780fe2ff6b54825f63e8b115e722062185c473f3.json
/cache/850ec9abdfe570102b64096e5baf2adf37367c43.json
/cache/8b188ec8ba03be56310ff28eef9a9037a043769b.json
/cache/9cd270ab9065bc11586e724193305eb3f884115c.json
/.streamlit/config.toml


File: /.gitignore
Content: Skipped binary file

File: /CHANGELOG.md
Content:
# Changelog

Update your installation to the latest version:

=== "pip"

    ```bash
    # pip show prettymapp  # check currently installed version
    pip install prettymapp --upgrade
    ```

## 0.4.0
**November 30, 2024**

- Allow selection of landcover classes via new `landcover_classes` parameter in `get_osm_geometries`
- `drawing_settings` parameter in `Plot` now defaults to `STYLES["Peach"]`
- `pyproject.toml` replaces setup.py & requirements.txt files

## 0.3.0
**April 23, 2024**

- Add get_osm_geometries_from_xml to plot OSM XML files
- Add Dockerfile


## 0.2.0
**August 25, 2023**

- Upgraded dependencies, adjust deprecated functions.

## 0.1.0
**December 03, 2022**

- Initial stable release on pypi


File: /Dockerfile
Content:
FROM python:3.11-slim

RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/*

COPY streamlit-prettymapp /app/streamlit-prettymapp/

WORKDIR /app

RUN pip3 install -r streamlit-prettymapp/requirements.txt

EXPOSE 8501

HEALTHCHECK CMD curl --fail http://localhost:8501/_stcore/health

ENTRYPOINT ["streamlit", "run", "streamlit-prettymapp/app.py", "--server.port=8501", "--server.address=0.0.0.0"]


File: /LICENSE
Content:
MIT License

Copyright (c) 2023 Christoph Rieke

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


File: /Makefile
Content:
test:
	-rm -r .pytest_cache
	black .
	python -m pytest --pylint --pylint-rcfile=../../pylintrc --mypy --mypy-ignore-missing-imports --durations=3

test[live]:
	-rm -r .pytest_cache
	black .
	python -m pytest --pylint --pylint-rcfile=../../pylintrc --mypy --mypy-ignore-missing-imports --runlive --durations=5

setup:
	pip install -r requirements.txt
	pip install -r streamlit-prettymapp/requirements.txt

setup-dev:
	pip install -r requirements.txt
	pip install -r requirements-dev.txt
	pip install -e .
	pip install streamlit

package:
	python setup.py sdist bdist_wheel
	twine check dist/*

upload:
	twine upload --skip-existing dist/*

clean:
	find . -name "__pycache__" -exec rm -rf {} +
	find . -name ".mypy_cache" -exec rm -rf {} +
	find . -name ".pytest_cache" -exec rm -rf {} +
	find . -name ".coverage" -exec rm -f {} +


File: /README.md
Content:
# prettymapp üñºÔ∏è

**Prettymapp is a webapp and Python package to create beautiful maps from OpenStreetMap data**

---
<h3 align="center">
    üéà Try it out here: <a href="https://prettymapp.streamlit.app/">prettymapp on streamlit üéà </a>
</h3>

---



<p align="center">
    <a href="https://prettymapp.streamlit.app/"><img src="./streamlit-prettymapp/example_prints/demo.gif" width=700></a>
</p>

<br>

<table>
    <tr><td><img src="./streamlit-prettymapp/example_prints/macau.png"></td><td><img src="./streamlit-prettymapp/example_prints/barcelona.png"></td></tr>
</table>

## Based on the prettymaps project

Prettymapp is based on a rewrite of the fantastic [prettymaps](https://github.com/marceloprates/prettymaps) project by
[@marceloprates](https://github.com/marceloprates). All credit for the original idea, designs and implementation go to him.
The prettymapp rewrite focuses on speed and adapted configuration to interface with the webapp.
It drops more complex configuration options in favour of improved speed, reduced code complexity and 
simplified configuration interfaces. It is partially tested and adds a [streamlit](https://streamlit.io/) webapp component.

## Running the app locally

```bash
git clone https://github.com/chrieke/prettymapp.git
cd prettymapp
pip install -r streamlit-prettymapp/requirements.txt
streamlit run streamlit-prettymapp/app.py
```

## Python package

You can also use prettymapp without the webapp, directly in Python. This lets you customize the functionality or 
build your own application.

**Installation:**

```bash
pip install prettymapp
```

**Define the area, download and plot the OSM data:**

You can select from 4 [predefined styles](prettymapp/settings.py#L35): `Peach`, `Auburn`, `Citrus` and `Flannel`.

```python
from prettymapp.geo import get_aoi
from prettymapp.osm import get_osm_geometries
from prettymapp.plotting import Plot
from prettymapp.settings import STYLES

aoi = get_aoi(address="Pra√ßa Ferreira do Amaral, Macau", radius=1100, rectangular=False)
df = get_osm_geometries(aoi=aoi)

fig = Plot(
    df=df,
    aoi_bounds=aoi.bounds,
    draw_settings=STYLES["Peach"],
).plot_all()

fig.savefig("map.jpg")
```

You can also plot exported OSM XML files e.g. from openstreetmap.org:

```python
from prettymapp.osm import get_osm_geometries_from_xml

df = get_osm_geometries_from_xml(filepath="Berlin.osm")
aoi_bounds = df.total_bounds
...
```

**Customize styles & layers**

Edit the `draw_settings` input to create your own custom styles! The map layout can be further customized with the additional arguments of the [`Plot`](plotting.py#L36) class (e.g. `shape`, `contour_width` etc.). Check the webapp [examples](streamlit-prettymapp/examples.json) for inspiration.

```python
from prettymapp.settings import STYLES

custom_style = STYLES["Peach"].copy()
custom_style["urban"] = {
    "cmap": ["#3452eb"],
    "ec": "#E9724C",
    "lw": 0.2,
    "zorder": 4,
}

fig = Plot(
    df=df,
    aoi_bounds=aoi.bounds,
    draw_settings=custom_style,
    shape="circle",
    contour_width=0,
).plot_all()

```

You can also customize the selection of OSM landcover classes that should be displayed.

```python
from prettymapp.settings import LANDCOVER_CLASSES

custom_lc_classes = LANDCOVER_CLASSES.copy()
custom_lc_classes["urban"]["building"] = False

df = get_osm_geometries(aoi=aoi, landcover_classes=custom_lc_classes)
```

File: /conftest.py
Content:
import pytest


def pytest_addoption(parser):
    parser.addoption(
        "--runlive", action="store_true", default=False, help="run live tests"
    )


def pytest_collection_modifyitems(config, items):
    if not config.getoption("--runlive"):
        skip_live = pytest.mark.skip(reason="need --runlive option to run")
        for item in items:
            if "live" in item.keywords:
                item.add_marker(skip_live)


File: /pylintrc
Content:
[MASTER]
init-hook='import glob; [sys.path.append(d) for d in glob.glob("*/") if not d.startswith("_")]'

[MESSAGE CONTROL]
disable=
    missing-docstring,
    no-else-return,
    too-few-public-methods,
    missing-final-newline,
    too-many-boolean-expressions,
    bad-continuation,
    invalid-name,
    super-init-not-called,
    inconsistent-return-statements,
    too-many-arguments,
    too-many-locals,
    protected-access,
    redefined-outer-name,
    too-many-instance-attributes,
    fixme,
    duplicate-code,
    logging-fstring-interpolation,
    logging-format-interpolation,
    too-many-lines
    
[FORMAT]
max-line-length=120
single-line-if-stmt=yes
include-naming-hint=yes
function-rgx=[a-z_][a-z0-9_]*$
argument-rgx=[a-z_][a-z0-9_]*$
variable-rgx=[a-z_][a-z0-9_]*$
# "logger" and "api" are common module-level globals, and not true 'constants'
const-rgx=(([A-Z_][A-Z0-9_]*)|(__.*__)|logger|api|_api)$

[DESIGN]
max-args=6
ignored-argument-names=_.*|self

[SIMILARITIES]
# Minimum lines number of a similarity.
min-similarity-lines=20   # TODO: Reset lower when pylint bug fixed #214.
ignore-comments=yes
ignore-docstrings=yes
ignore-imports=no


File: /pyproject.toml
Content:
[project]
name = "prettymapp"
version = "0.4.0"
description = "Create beautiful maps from OpenStreetMap data"
readme = "README.md"
requires-python = ">=3.11"
license = { text = "MIT" }
authors = [{ name = "Christoph Rieke", email = "christoph.k.rieke@gmail.com" }]
keywords = ["art", "map", "cartography", "osm", "streamlit"]
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers"
]
dependencies = [
    "matplotlib>=3.9.2",
    "osmnx>=2.0.0",
    "pandas==2.2.3",
    "pyogrio>=0.10.0",
]

[project.optional-dependencies]
streamlit = [
    "streamlit",
    "streamlit-image-select",
]

[dependency-groups]
dev = [
    "black",
    "pylint==3.1.0",
    "mock",
    "types-mock",
    "pytest",
    "pytest-pylint",
    "pytest-sugar",
    "pytest-mypy",
    "mypy==1.9.0",
    "mypy-extensions",
    "twine",
]

[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

# Specifically define package, doesn't know if prettymapp or cache
[tool.setuptools]
package-dir = {"" = "."}
include-package-data = false
license-files = ["LICENSES/*.txt"]

[tool.setuptools.packages.find]
where = ["."]
include = ["prettymapp*"]

[tool.setuptools.package-data]
prettymapp = ["fonts/PermanentMarker-Regular.ttf"]

[project.urls]
Homepage = "https://github.com/chrieke/prettymapp"
Changelog = "https://github.com/chrieke/prettymapp/changelog"


File: /pytest.ini
Content: Skipped binary file

File: /streamlit-prettymapp/app.py
Content:
import copy
import json

import streamlit as st
from streamlit_image_select import image_select

from utils import (
    st_get_osm_geometries,
    st_plot_all,
    get_colors_from_style,
    gdf_to_bytesio_geojson,
)
from prettymapp.geo import GeoCodingError, get_aoi
from prettymapp.settings import STYLES

st.set_page_config(
    page_title="prettymapp", page_icon="üñºÔ∏è", initial_sidebar_state="collapsed"
)
st.markdown("# Prettymapp")

with open("./streamlit-prettymapp/examples.json", "r", encoding="utf8") as f:
    EXAMPLES = json.load(f)

if not st.session_state:
    st.session_state.update(EXAMPLES["Macau"])

    lc_class_colors = get_colors_from_style("Peach")
    st.session_state.lc_classes = list(lc_class_colors.keys())  # type: ignore
    st.session_state.update(lc_class_colors)
    st.session_state["previous_style"] = "Peach"
    st.session_state["previous_example_index"] = 0

example_image_pattern = "streamlit-prettymapp/example_prints/{}_small.png"
example_image_fp = [
    example_image_pattern.format(name.lower()) for name in list(EXAMPLES.keys())[:4]
]
index_selected = image_select(
    "",
    images=example_image_fp,
    captions=list(EXAMPLES.keys())[:4],
    index=0,
    return_value="index",
)
if index_selected != st.session_state["previous_example_index"]:
    name_selected = list(EXAMPLES.keys())[index_selected]
    st.session_state.update(EXAMPLES[name_selected].copy())
    st.session_state["previous_example_index"] = index_selected

st.write("")
form = st.form(key="form_settings")
col1, col2, col3 = form.columns([3, 1, 1])

address = col1.text_input(
    "Location address",
    key="address",
)
radius = col2.slider(
    "Radius (meter)",
    100,
    1500,
    key="radius",
)

style: str = col3.selectbox(
    "Color theme",
    options=list(STYLES.keys()),
    key="style",
)

expander = form.expander("Customize map style")
col1style, col2style, _, col3style = expander.columns([2, 2, 0.1, 1])

shape_options = ["circle", "rectangle"]
shape = col1style.radio(
    "Map Shape",
    options=shape_options,
    key="shape",
)

bg_shape_options = ["rectangle", "circle", None]
bg_shape = col1style.radio(
    "Background Shape",
    options=bg_shape_options,
    key="bg_shape",
)
bg_color = col1style.color_picker(
    "Background Color",
    key="bg_color",
)
bg_buffer = col1style.slider(
    "Background Size",
    min_value=0,
    max_value=50,
    help="How much the background extends beyond the figure.",
    key="bg_buffer",
)

col1style.markdown("---")
contour_color = col1style.color_picker(
    "Map contour color",
    key="contour_color",
)
contour_width = col1style.slider(
    "Map contour width",
    0,
    30,
    help="Thickness of contour line sourrounding the map.",
    key="contour_width",
)

name_on = col2style.checkbox(
    "Display title",
    help="If checked, adds the selected address as the title. Can be customized below.",
    key="name_on",
)
custom_title = col2style.text_input(
    "Custom title (optional)",
    max_chars=30,
    key="custom_title",
)
font_size = col2style.slider(
    "Title font size",
    min_value=1,
    max_value=50,
    key="font_size",
)
font_color = col2style.color_picker(
    "Title font color",
    key="font_color",
)
text_x = col2style.slider(
    "Title left/right",
    -100,
    100,
    key="text_x",
)
text_y = col2style.slider(
    "Title top/bottom",
    -100,
    100,
    key="text_y",
)
text_rotation = col2style.slider(
    "Title rotation",
    -90,
    90,
    key="text_rotation",
)

if style != st.session_state["previous_style"]:
    st.session_state.update(get_colors_from_style(style))  # type: ignore
draw_settings = copy.deepcopy(STYLES[style])
for lc_class in st.session_state.lc_classes:
    picked_color = col3style.color_picker(lc_class, key=lc_class)
    if "_" in lc_class:
        lc_class, idx = lc_class.split("_")
        draw_settings[lc_class]["cmap"][int(idx)] = picked_color  # type: ignore
    else:
        draw_settings[lc_class]["fc"] = picked_color

form.form_submit_button(label="Submit")

result_container = st.empty()
with st.spinner("Creating map... (may take up to a minute)"):
    rectangular = shape != "circle"
    try:
        aoi = get_aoi(address=address, radius=radius, rectangular=rectangular)
    except GeoCodingError as e:
        st.error(f"ERROR: {str(e)}")
        st.stop()
    df = st_get_osm_geometries(aoi=aoi)
    config = {
        "aoi_bounds": aoi.bounds,
        "draw_settings": draw_settings,
        "name_on": name_on,
        "name": address if custom_title == "" else custom_title,
        "font_size": font_size,
        "font_color": font_color,
        "text_x": text_x,
        "text_y": text_y,
        "text_rotation": text_rotation,
        "shape": shape,
        "contour_width": contour_width,
        "contour_color": contour_color,
        "bg_shape": bg_shape,
        "bg_buffer": bg_buffer,
        "bg_color": bg_color,
    }
    fig = st_plot_all(_df=df, **config)
    # result_container.write(html, unsafe_allow_html=True)
    st.pyplot(fig, pad_inches=0, bbox_inches="tight", transparent=True, dpi=300)

# svg_string = plt_to_svg(fig)
# html = svg_to_html(svg_string)
# st.write("")
# fname = slugify(address)
# img_format = st.selectbox("Download image as", ["svg", "png", "jpg"], index=0)
# if img_format == "svg":
#     data = svg_string
# elif img_format == "png":
#     import io
#
#     data = io.BytesIO()
#     fig.savefig(data, pad_inches=0, bbox_inches="tight", transparent=True)
# st.download_button(label="Download image", data=data, file_name=f"{fname}.{img_format}")

st.markdown("</br>", unsafe_allow_html=True)
st.markdown("</br>", unsafe_allow_html=True)
ex1, ex2 = st.columns(2)

with ex1.expander("Export geometries as GeoJSON"):
    st.write(f"{df.shape[0]} geometries")
    st.download_button(
        label="Download",
        data=gdf_to_bytesio_geojson(df),
        file_name=f"prettymapp_{address[:10]}.geojson",
        mime="application/geo+json",
    )

config = {"address": address, **config}
with ex2.expander("Export map configuration"):
    st.write(config)


st.markdown("---")
st.write(
    "Share on social media with the hashtag [#prettymaps](https://twitter.com/search?q=%23prettymaps&src=typed_query) !"
)
st.markdown(
    "More infos and :star: at [github.com/chrieke/prettymapp](https://github.com/chrieke/prettymapp)"
)

st.session_state["previous_style"] = style


File: /streamlit-prettymapp/examples.json
Content:
{
    "Macau": {
        "address": "Pra√ßa Ferreira do Amaral, Macau",
        "custom_title": "Macau",
        "radius": 1100,
        "style": "Peach",
        "shape": "circle",
        "contour_width": 1,
        "contour_color": "#2F3537",
        "image": "macao.png",
        "name_on": true,
        "font_size": 25,
        "font_color": "#2F3737",
        "text_x": 19,
        "text_y": -45,
        "text_rotation": -24,
        "bg_shape": "circle",
        "bg_buffer": 2,
        "bg_color": "#F2F4CB"
    },
    "Barcelona": {
        "address": "Pla√ßa Tetuan, 08010 Barcelona, Spain",
        "custom_title": "Barcelona, Spain",
        "radius": 640,
        "style": "Auburn",
        "shape": "rectangle",
        "contour_width": 0,
        "contour_color": "#2F3538",
        "image": "barcelona.png",
        "name_on": true,
        "font_size": 30,
        "font_color": "#2F3738",
        "text_x": -53,
        "text_y": 18,
        "text_rotation": -90,
        "bg_shape": "rectangle",
        "bg_buffer": 6,
        "bg_color": "#F9EFDC"
    },
    "W√ºrzburg": {
        "address": "Martinstra√üe 4, 97070 W√ºrzburg",
        "custom_title": "W√ºrzburg Old Town",
        "radius": 1020,
        "style": "Citrus",
        "shape": "circle",
        "contour_width": 15,
        "contour_color": "#FFFFFF",
        "image": "edinburgh.png",
        "name_on": true,
        "font_size": 25,
        "font_color": "#FFFFFF",
        "text_x": -41,
        "text_y": 25,
        "text_rotation": -46,
        "bg_shape": null,
        "bg_buffer": 4,
        "bg_color": "#000000"
    },
    "Heerhugowaard": {
        "address": "Stad van de Zon, Heerhugowaard, Netherlands",
        "custom_title": "",
        "radius": 650,
        "style": "Flannel",
        "shape": "rectangle",
        "contour_width": 0,
        "contour_color": "#2F3737",
        "image": "heerhugowaard.png",
        "name_on": true,
        "font_size": 27,
        "font_color": "#2F3737",
        "text_x": 0,
        "text_y": -33,
        "text_rotation": 0,
        "bg_shape": "rectangle",
        "bg_buffer": 0,
        "bg_color": "#EDEFDA"
    },
    "Edinburgh": {
        "address": "Princes St, Edinburgh, UK",
        "custom_title": "",
        "radius": 850,
        "style": "Peach",
        "shape": "circle",
        "contour_width": 0,
        "contour_color": "#2F3737",
        "image": "edinburgh.png",
        "name_on": false,
        "font_size": 16,
        "font_color": "#2F3737",
        "text_x": -37,
        "text_y": 26,
        "text_rotation": -45,
        "bg_shape": "rectangle",
        "bg_buffer": 2,
        "bg_color": "#F2F4CB"
    },
    "Erbil": "erbil.png"
}


File: /streamlit-prettymapp/requirements.txt
Content:
# Keep for streamlit install
streamlit==1.40.2
streamlit-image-select==0.6.0
pyogrio
prettymapp


File: /streamlit-prettymapp/utils.py
Content:
import base64
from io import StringIO, BytesIO
import unicodedata
import re
from typing import Any
import io
import json

from matplotlib.pyplot import figure
import streamlit as st
from geopandas import GeoDataFrame
from shapely.geometry import Polygon

from prettymapp.plotting import Plot
from prettymapp.osm import get_osm_geometries
from prettymapp.settings import STYLES


@st.cache_data(
    show_spinner=False, hash_funcs={Polygon: lambda x: json.dumps(x.__geo_interface__)}
)
def st_get_osm_geometries(aoi):
    """Wrapper to enable streamlit caching for package function"""
    df = get_osm_geometries(aoi=aoi)
    return df


@st.cache_data(show_spinner=False)
def st_plot_all(_df: GeoDataFrame, **kwargs):
    """Wrapper to enable streamlit caching for package function"""
    fig = Plot(_df, **kwargs).plot_all()
    return fig


def get_colors_from_style(style: str) -> dict:
    """
    Returns dict of landcover_class : color
    """
    lc_class_colors = {}
    for lc_class, class_style in STYLES[style].items():
        colors = class_style.get("cmap", class_style.get("fc"))
        if isinstance(colors, list):
            for idx, color in enumerate(colors):
                lc_class_colors[f"{lc_class}_{idx}"] = color
        else:
            lc_class_colors[lc_class] = colors
    return lc_class_colors


def plt_to_svg(fig: figure) -> str:
    imgdata = StringIO()
    fig.savefig(
        imgdata, format="svg", pad_inches=0, bbox_inches="tight", transparent=True
    )
    imgdata.seek(0)
    svg_string = imgdata.getvalue()
    return svg_string


def svg_to_html(svg_string: str) -> str:
    b64 = base64.b64encode(svg_string.encode("utf-8")).decode("utf-8")
    css_justify = "center"
    css = f'<p style="text-align:center; display: flex; flex-direction: column; justify-content: {css_justify};">'
    html = rf'{css}<img src="data:image/svg+xml;base64,{b64}"/>'
    return html


def plt_to_href(fig: figure, filename: str):
    buf = BytesIO()
    fig.savefig(buf, format="png", pad_inches=0, bbox_inches="tight", transparent=True)
    img_str = base64.b64encode(buf.getvalue()).decode()
    href = f'<a href="data:file/txt;base64,{img_str}" download="{filename}"></a>'
    return href


def slugify(value: Any, allow_unicode: bool = False):
    """
    Taken from https://github.com/django/django/blob/master/django/utils/text.py
    Convert to ASCII if 'allow_unicode' is False. Convert spaces or repeated
    dashes to single dashes. Remove characters that aren't alphanumerics,
    underscores, or hyphens. Convert to lowercase. Also strip leading and
    trailing whitespace, dashes, and underscores.
    """
    value = str(value)
    if allow_unicode:
        value = unicodedata.normalize("NFKC", value)
    else:
        value = (
            unicodedata.normalize("NFKD", value)
            .encode("ascii", "ignore")
            .decode("ascii")
        )
    value = re.sub(r"[^\w\s-]", "", value.lower())
    return re.sub(r"[-\s]+", "-", value).strip("-_")


def gdf_to_bytesio_geojson(geodataframe):
    geojson_object = io.BytesIO()
    geodataframe.to_file(geojson_object, driver="GeoJSON")
    return geojson_object


File: /streamlit-prettymapp/example_prints/barcelona.png
Content: Skipped binary file

File: /streamlit-prettymapp/example_prints/barcelona_small.png
Content: Skipped binary file

File: /streamlit-prettymapp/example_prints/demo.gif
Content: Skipped binary file

File: /streamlit-prettymapp/example_prints/heerhugowaard_small.png
Content: Skipped binary file

File: /streamlit-prettymapp/example_prints/macau.png
Content: Skipped binary file

File: /streamlit-prettymapp/example_prints/macau_small.png
Content: Skipped binary file

File: /streamlit-prettymapp/example_prints/wuerzburg.png
Content: Skipped binary file

File: /streamlit-prettymapp/example_prints/w√ºrzburg_small.png
Content: Skipped binary file

File: /prettymapp/__init__.py
Content:


File: /prettymapp/example_notebook.ipynb
Content: Skipped due to missing encoding

File: /prettymapp/geo.py
Content:
from typing import Tuple, Optional

from osmnx.geocoder import geocode
from geopandas import GeoDataFrame
import pandas as pd
from pandas import DataFrame
from shapely.geometry import Polygon, Point, box


class GeoCodingError(Exception):
    pass


def validate_coordinates(lat: float, lon: float) -> None:
    if lat < -90 or lat > 90 or lon < -180 or lon > 180:
        raise ValueError(
            "longitude (-90 to 90) and latitude (-180 to 180) coordinates "
            "are not within valid ranges."
        )


def get_aoi(
    address: Optional[str] = None,
    coordinates: Optional[Tuple[float, float]] = None,
    radius: int = 1000,
    rectangular: bool = False,
) -> Polygon:
    """
    Gets round or rectangular shapely Polygon in in 4326 from input address or coordinates.

    Args:
        address: Address string
        coordinates: lat, lon
        radius: Radius in meter
        rectangular: Optionally return aoi as rectangular polygon, default False.

    Returns:
        shapely Polygon in 4326 crs
    """
    if address is not None:
        if coordinates is not None:
            raise ValueError(
                "Both address and latlon coordinates were provided, please "
                "select only one!"
            )
        try:
            lat, lon = geocode(address)
        except ValueError as e:
            raise GeoCodingError(f"Could not geocode address '{address}'") from e
    else:
        lat, lon = coordinates  # type: ignore
    validate_coordinates(lat, lon)

    df = GeoDataFrame(
        DataFrame([0], columns=["id"]), crs="EPSG:4326", geometry=[Point(lon, lat)]
    )
    df = df.to_crs(df.estimate_utm_crs())
    df.geometry = df.geometry.buffer(radius)
    df = df.to_crs(crs=4326)
    poly = df.iloc[0].geometry

    if rectangular:
        poly = box(*poly.bounds)

    return poly


def explode_multigeometries(df: GeoDataFrame) -> GeoDataFrame:
    """
    Explode all multi geometries in a geodataframe into individual polygon geometries.
    Adds exploded polygons as rows at the end of the geodataframe and resets its index.
    Args:
        df: Input GeoDataFrame
    """
    mask = df.geom_type.isin(["MultiPolygon", "MultiLineString", "MultiPoint"])
    outdf = df[~mask]
    df_multi = df[mask]
    for _, row in df_multi.iterrows():
        df_temp = GeoDataFrame(
            pd.DataFrame.from_records([row.to_dict()] * len(row.geometry.geoms)),
            crs="EPSG:4326",
        )
        df_temp.geometry = list(row.geometry.geoms)
        outdf = GeoDataFrame(
            pd.concat([outdf, df_temp], ignore_index=True), crs="EPSG:4326"
        )

    outdf = outdf.reset_index(drop=True)
    return outdf


File: /prettymapp/osm.py
Content:
from typing import Union
from pathlib import Path

from osmnx.features import features_from_polygon, features_from_xml
from osmnx import settings
from geopandas import clip, GeoDataFrame
from shapely.geometry import Polygon

from prettymapp.geo import explode_multigeometries
from prettymapp.settings import LANDCOVER_CLASSES

settings.use_cache = True
settings.log_console = False


def get_osm_tags(landcover_classes: dict = LANDCOVER_CLASSES):
    """
    Get relevant OSM tags for use with prettymapp
    
    Args:
        landcover_classes: Landcover selection settings, defaults to prettymapp.settings.LANDCOVER_CLASSES
    """
    tags: dict = {}
    for d in landcover_classes.values():  # type: ignore
        for k, v in d.items():  # type: ignore
            try:
                tags.setdefault(k, []).extend(v)
            except TypeError:  # e.g. "building": True
                tags[k] = v
    return tags


def cleanup_osm_df(
    df: GeoDataFrame, aoi: Union[Polygon, None] = None, landcover_classes: dict = LANDCOVER_CLASSES
) -> GeoDataFrame:
    """
    Cleanup of queried osm geometries to relevant level for use with prettymapp
    
    Args:
        df: GeoDataFrame with queried OSM geometries
        aoi: Optional geographic boundary to filter elements
        landcover_classes: Landcover selection settings, defaults to prettymapp.settings.LANDCOVER_CLASSES
    """
    df = df.droplevel(level=0)
    df = df[~df.geometry.geom_type.isin(["Point", "MultiPoint"])]
    if aoi is not None:
        df = clip(df, aoi)
    df = explode_multigeometries(df)

    df["landcover_class"] = None
    for lc_class, osm_tags in landcover_classes.items():
        tags_in_columns = list(set(osm_tags.keys()).intersection(list(df.columns)))  # type: ignore
        mask_lc_class = df[tags_in_columns].notna().sum(axis=1) != 0
        # Remove mask elements that belong to other subtag
        listed_osm_tags = {
            k: v
            for k, v in osm_tags.items()  # type: ignore
            if isinstance(v, list) and k in tags_in_columns
        }
        for tag, subtags in listed_osm_tags.items():
            mask_from_different_subtag = ~df[tag].isin(subtags) & df[tag].notna()
            mask_lc_class[mask_from_different_subtag] = False
        df.loc[mask_lc_class, "landcover_class"] = lc_class
    # Drop not assigned elements (part of multiple classes)
    df = df[~df["landcover_class"].isnull()]
    df = df.drop(
        df.columns.difference(["geometry", "landcover_class", "highway"]), axis=1
    )

    return df


def get_osm_geometries(
    aoi: Polygon, landcover_classes: dict = LANDCOVER_CLASSES
) -> GeoDataFrame:
    """
    Query OSM features within a polygon geometry.

    Args:
        aoi: Polygon geometry query boundary.
        landcover_classes: Landcover selection settings, defaults to prettymapp.settings.LANDCOVER_CLASSES
    """
    tags = get_osm_tags(landcover_classes=landcover_classes)
    df = features_from_polygon(polygon=aoi, tags=tags)
    df = cleanup_osm_df(df, aoi)
    return df


def get_osm_geometries_from_xml(
    filepath: Union[str, Path], aoi: Union[Polygon, None] = None, landcover_classes: dict = LANDCOVER_CLASSES
) -> GeoDataFrame:
    """
    Query OSM features in an OSM-formatted XML file.

    Args:
        filepath: path to file containing OSM XML data
        aoi: Optional geographic boundary to filter elements
        landcover_classes: Landcover selection settings, defaults to prettymapp.settings.LANDCOVER_CLASSES
    """
    tags = get_osm_tags(landcover_classes=landcover_classes)
    df = features_from_xml(filepath, polygon=aoi, tags=tags)
    df = cleanup_osm_df(df, aoi)
    return df


File: /prettymapp/plotting.py
Content:
from pathlib import Path
import colorsys
from typing import Tuple, List
from dataclasses import dataclass

from dataclasses import field
from geopandas.plotting import _plot_polygon_collection, _plot_linestring_collection
from geopandas import GeoDataFrame
import numpy as np
from matplotlib.colors import ListedColormap, cnames, to_rgb
from matplotlib.pyplot import subplots, Rectangle
import matplotlib.font_manager as fm
from matplotlib.patches import Ellipse
import matplotlib.patheffects as PathEffects

from prettymapp.settings import STREETS_WIDTH, STYLES


def adjust_lightness(color: str, amount: float = 0.5) -> Tuple[float, float, float]:
    """
    In-/Decrease color brightness amount by factor.

    Helper to avoid having the user define background ec color value which is similar to background color.

    via https://stackoverflow.com/questions/37765197/darken-or-lighten-a-color-in-matplotlib
    """
    try:
        c = cnames[color]
    except KeyError:
        c = color
    c = colorsys.rgb_to_hls(*to_rgb(c))
    adjusted_c = colorsys.hls_to_rgb(c[0], max(0, min(1, amount * c[1])), c[2])
    return adjusted_c


@dataclass
class Plot:
    """
    Main plotting class for prettymapp.
    """
    df: GeoDataFrame
    aoi_bounds: List[
        float
    ]  # Not df bounds as could lead to weird plot shapes with unequal geometry distribution.
    draw_settings: dict = field(default_factory=lambda: STYLES["Peach"])
    # Map layout settings
    shape: str = "circle"
    contour_width: int = 0
    contour_color: str = "#2F3537"
    # Optional map text settings e.g. to display location name
    name_on: bool = False
    name: str = "some name"
    font_size: int = 25
    font_color: str = "#2F3737"
    text_x: int = 0
    text_y: int = 0
    text_rotation: int = 0
    # Map background settings
    bg_shape: str = "rectangle"
    bg_buffer: int = 2
    bg_color: str = "#F2F4CB"

    def __post_init__(self):
        (
            self.xmin,
            self.ymin,
            self.xmax,
            self.ymax,
        ) = self.aoi_bounds
        # take from aoi geometry bounds, otherwise probelematic if unequal geometry distribution over plot.
        self.xmid = (self.xmin + self.xmax) / 2
        self.ymid = (self.ymin + self.ymax) / 2
        self.xdif = self.xmax - self.xmin
        self.ydif = self.ymax - self.ymin

        self.bg_buffer_x = (self.bg_buffer / 100) * self.xdif
        self.bg_buffer_y = (self.bg_buffer / 100) * self.ydif

        self.fig, self.ax = subplots(
            1, 1, figsize=(12, 12), constrained_layout=True, dpi=1200
        )
        self.ax.set_aspect(1 / np.cos(self.ymid * np.pi / 180))

        self.ax.axis("off")
        self.ax.set_xlim(self.xmin - self.bg_buffer_x, self.xmax + self.bg_buffer_x)
        self.ax.set_ylim(self.ymin - self.bg_buffer_y, self.ymax + self.bg_buffer_y)

    def plot_all(self):
        if self.bg_shape is not None:
            self.set_background()
        self.set_geometries()
        if self.contour_width:
            self.set_map_contour()
        if self.name_on:
            self.set_name()
        self.set_credits(add_package_credit=True)

        return self.fig

    def set_geometries(self):
        """
        Avoids using geodataframe.plot() as this uses plt.draw(), but for the app, the figure needs to be rendered
        only in st.pyplot. Shaves off 1 sec.
        """
        for lc_class in self.df["landcover_class"].unique():
            df_class = self.df[self.df["landcover_class"] == lc_class]
            try:
                draw_settings_class = self.draw_settings[lc_class].copy()
            except KeyError:
                continue

            # pylint: disable=no-else-continue
            if lc_class == "streets":
                df_class = df_class[df_class.geom_type == "LineString"]
                linewidth_values = list(
                    df_class["highway"].map(STREETS_WIDTH).fillna(1)
                )
                draw_settings_class["ec"] = draw_settings_class.pop("fc")
                linecollection = _plot_linestring_collection(
                    ax=self.ax, geoms=df_class.geometry, **draw_settings_class
                )
                linecollection.set_linewidth(linewidth_values)
                self.ax.add_collection(linecollection, autolim=True)
                continue
            else:
                df_class = df_class[df_class.geom_type == "Polygon"]

            if "hatch_c" in draw_settings_class:
                # Matplotlib hatch color is set via ec. hatch_c is used as the edge color here by plotting the outlines
                # again above.
                _plot_polygon_collection(
                    ax=self.ax,
                    geoms=df_class.geometry,
                    fc="None",
                    ec=draw_settings_class["hatch_c"],
                    lw=1,
                    zorder=6,
                )
                draw_settings_class.pop("hatch_c")

            if "cmap" in draw_settings_class:
                cmap = ListedColormap(draw_settings_class["cmap"])
                draw_settings_class.pop("cmap")
                cmap_values = np.random.randint(0, 3, df_class.shape[0])
                _plot_polygon_collection(
                    ax=self.ax,
                    geoms=df_class.geometry,
                    values=cmap_values,
                    cmap=cmap,
                    **draw_settings_class
                )
            else:
                _plot_polygon_collection(
                    ax=self.ax, geoms=df_class.geometry, **draw_settings_class
                )

    def set_map_contour(self):
        if self.shape == "rectangle":
            patch = Rectangle(
                xy=(self.xmin, self.ymin),
                width=self.xdif,
                height=self.ydif,
                color="None",
                lw=self.contour_width,
                ec=self.contour_color,
                zorder=6,
                clip_on=True,
            )
            self.ax.add_patch(patch)
        elif self.shape == "circle":
            # axis aspect ratio no equal so ellipse required to display as circle
            ellipse = Ellipse(
                xy=(self.xmid, self.ymid),  # centroid
                width=self.xdif,
                height=self.ydif,
                color="None",
                lw=self.contour_width,
                ec=self.contour_color,
                zorder=6,
                clip_on=True,
            )
            self.ax.add_artist(ellipse)
            # re-enable patch for background color that is deactivated with axis
        self.ax.patch.set_zorder(6)

    def set_background(self):
        ec = adjust_lightness(self.bg_color, 0.78)
        if self.bg_shape == "rectangle":
            patch = Rectangle(
                xy=(self.xmin - self.bg_buffer_x, self.ymin - self.bg_buffer_y),
                width=self.xdif + 2 * self.bg_buffer_x,
                height=self.ydif + 2 * self.bg_buffer_y,
                color=self.bg_color,
                ec=ec,
                hatch="ooo...",
                zorder=-1,
                clip_on=True,
            )
            self.ax.add_patch(patch)
        elif self.bg_shape == "circle":
            # axis aspect ratio no equal so ellipse required to display as circle
            ellipse = Ellipse(
                xy=(self.xmid, self.ymid),  # centroid
                width=self.xdif + 2 * self.bg_buffer_x,
                height=self.ydif + 2 * self.bg_buffer_y,
                facecolor=self.bg_color,
                ec=adjust_lightness(self.bg_color, 0.78),
                hatch="ooo...",
                zorder=-1,
                clip_on=True,
            )
            self.ax.add_artist(ellipse)
        # re-enable patch for background color that is deactivated with axis
        self.ax.patch.set_zorder(-1)

    def set_name(self):
        x = self.xmid + self.text_x / 100 * self.xdif
        y = self.ymid + self.text_y / 100 * self.ydif

        _location_ = Path(__file__).resolve().parent
        fpath = _location_ / "fonts/PermanentMarker-Regular.ttf"
        fontproperties = fm.FontProperties(fname=fpath.resolve())
        self.ax.text(
            x=x,
            y=y,
            s=self.name,
            color=self.font_color,
            zorder=6,
            ha="center",
            rotation=self.text_rotation * -1,
            fontproperties=fontproperties,
            size=self.font_size,
        )

    def set_credits(self, add_package_credit=True):
        credit_text = "¬© OpenStreetMap"
        package_credit_text = "\n prettymapp | prettymaps"
        if add_package_credit:
            credit_text = credit_text + package_credit_text

        x = self.xmin + 0.87 * self.xdif
        y = self.ymin - 0.70 * self.bg_buffer_y
        text = self.ax.text(x=x, y=y, s=credit_text, c="w", fontsize=9, zorder=6)
        text.set_path_effects([PathEffects.withStroke(linewidth=3, foreground="black")])


File: /prettymapp/settings.py
Content:
LANDCOVER_CLASSES = {
    "urban": {"building": True, "landuse": ["construction", "commercial"]},
    "water": {
        "natural": ["water", "bay"],
        "place": ["sea"],
        "leisure": ["swimming_pool"],
    },
    "woodland": {"landuse": ["forest"]},
    "grassland": {
        "landuse": ["grass", "vineyard", "orchard", "village_green"],
        "natural": ["island", "wood"],
        "leisure": ["park", "pitch", "garden", "golf_course"],
    },
    "streets": {
        "highway": [
            "motorway",
            "trunk",
            "primary",
            "secondary",
            "tertiary",
            "cycleway",
            "residential",
            "service",
            "unclassified",
            "footway",
            "motorway_link",
        ],
        "railway": True,
    },
    "other": {"amenity": ["parking"], "man_made": ["pier"], "highway": ["pedestrian"]},
}

# Contains drawing settings
STYLES = {
    "Peach": { # e.g. Macau
        "urban": {
            "cmap": ["#FFC857", "#E9724C", "#C5283D"],
            "ec": "#2F3737",
            "lw": 0.5,
            "zorder": 4,
        },
        "water": {
            "fc": "#a1e3ff",
            "ec": "#85c9e6",
            "hatch": "ooo...",
            "hatch_c": "#2F3737",
            "lw": 1,
            "zorder": 1,
        },
        "grassland": {"fc": "#D0F1BF", "ec": "#2F3737", "lw": 1, "zorder": 2},
        "woodland": {"fc": "#64B96A", "ec": "#2F3737", "lw": 1, "zorder": 2},
        "streets": {"fc": "#2F3737", "zorder": 3},
        "other": {"fc": "#F2F4CB", "ec": "#2F3737", "lw": 1, "zorder": 3},
    },
    "Auburn": { # e.g. Barcelona
        "urban": {
            "cmap": ["#433633", "#FF5E5B", "#FF5E5B"],
            "ec": "#2F3737",
            "lw": 0.5,
            "zorder": 5,
        },
        "water": {
            "fc": "#a8e1e6",
            "ec": "#2F3737",
            "hatch": "ooo...",
            "hatch_c": "#9bc3d4",
            "lw": 1,
            "zorder": 3,
        },
        "grassland": {
            "fc": "#8BB174",
            "ec": "#2F3737",
            "hatch": "ooo...",
            "hatch_c": "#A7C497",
            "lw": 1,
            "zorder": 1,
        },
        "woodland": {"fc": "#64B96A", "ec": "#2F3737", "lw": 1, "zorder": 2},
        "streets": {"fc": "#2F3737", "zorder": 4},
        "other": {"fc": "#F2F4CB", "ec": "#2F3737", "lw": 1, "zorder": 3},
    },
    "Citrus": { # e.g. W√ºrzburg
        "urban": {
            "cmap": ["#FFFF3F", "#F4D58D", "#F5CB5C"],
            "ec": "#2F3737",
            "lw": 0.5,
            "zorder": 5,
        },
        "water": {
            "fc": "#007F5F",
            "ec": "#2F3737",
            "lw": 1,
            "zorder": 3,
        },
        "grassland": {
            "fc": "#55A630",
            "ec": "#2F3737",
            "hatch": "ooo...",
            "hatch_c": "#80B918",
            "lw": 1,
            "zorder": 1,
        },
        "woodland": {"fc": "#80B918", "ec": "#2F3737", "lw": 1, "zorder": 2},
        "streets": {"fc": "#FFFFFF", "zorder": 4},
        "other": {"fc": "#EAE2B7", "ec": "#2F3737", "lw": 1, "zorder": 3},
    },
    "Flannel": { # e.g. Heerhugowaard
        "urban": {
            "cmap": ["#433633", "#FF5E5B", "#FF5E5B"],
            "ec": "#2F3737",
            "lw": 0.5,
            "zorder": 5,
        },
        "water": {
            "fc": "#a8e1e6",
            "ec": "#9bc3d4",
            "hatch_c": "#2F3737",
            "hatch": "ooo...",
            "lw": 1,
            "zorder": 3,
        },
        "grassland": {
            "fc": "#8BB174",
            "ec": "#A7C497",
            "hatch": "ooo...",
            "hatch_c": "#2F3737",
            "lw": 1,
            "zorder": 1,
        },
        "woodland": {"fc": "#64B96A", "ec": "#2F3737", "lw": 1, "zorder": 2},
        "streets": {"fc": "#2F3737", "zorder": 4, "ec": 475657},
        "other": {"fc": "#F2F4CB", "ec": "#2F3737", "lw": 1, "zorder": 3},
    },
}

STREETS_WIDTH = {
    "motorway": 4,
    "trunk": 4,
    "primary": 3.5,
    "primary_link": 3.5,
    "motorway_link": 3,
    "secondary": 3,
    "secondary_link": 3,
    "tertiary": 2.5,
    "tertiary_link": 2.5,
    "cycleway": 2.5,
    "residential": 2,
    "service": 1.5,
    "unclassified": 1.5,
    "pedestrian": 1.5,
    "footway": 0.7,
}


File: /prettymapp/tests/__init__.py
Content:


File: /prettymapp/tests/test_geo.py
Content:
from mock import patch
import pytest
from shapely.geometry import Polygon, MultiPolygon
import osmnx as ox
import geopandas as gpd
import pandas as pd

from prettymapp.geo import (
    validate_coordinates,
    get_aoi,
    GeoCodingError,
    explode_multigeometries,
)


def test_validate_coordinates():
    validate_coordinates(lat=-89.3, lon=178.2)
    validate_coordinates(lat=89.3, lon=-178.2)
    with pytest.raises(ValueError):
        validate_coordinates(lat=-92.3, lon=237.2)
    with pytest.raises(ValueError):
        validate_coordinates(lat=92.3, lon=-237.2)


@patch.object(ox, "geocode")
def test_get_aoi_from_user_input_address(ox_geocode):
    ox_geocode.return_value = 52.52, 13.4

    poly = get_aoi("Unter den Linden 37, 10117 Berlin")
    assert isinstance(poly, Polygon)
    assert poly.bounds == (
        13.373621926483281,
        52.50770588495259,
        13.40308384727806,
        52.525679099870146,
    )
    assert poly.area == 0.000415427539857519


@patch.object(ox, "geocode")
def test_get_aoi_from_user_input_coordinates(ox_geocode):
    ox_geocode.return_value = 52.52, 13.4

    poly = get_aoi(coordinates=(52.52, 13.4))
    assert isinstance(poly, Polygon)
    assert poly.bounds == (
        13.38526793559592,
        52.511013338753465,
        13.414732236942758,
        52.52898664609029,
    )


@patch.object(ox, "geocode")
def test_get_aoi_from_user_input_rectangle(ox_geocode):
    ox_geocode.return_value = 52.52, 13.4

    poly = get_aoi("Unter den Linden 37, 10117 Berlin", rectangular=True)
    assert isinstance(poly, Polygon)
    assert poly.bounds == (
        13.373621926483281,
        52.50770588495259,
        13.40308384727806,
        52.525679099870146,
    )
    assert poly.area == 0.0005295254343284959


@pytest.mark.live
def test_get_aoi_from_user_input_address_live():
    poly = get_aoi("Unter den Linden 37, 10117 Berlin")
    assert isinstance(poly, Polygon)
    assert poly.bounds == (
        13.373621926483281,
        52.507705884952586,
        13.403083847278062,
        52.52567909987013,
    )


@pytest.mark.live
def test_get_aoi_from_user_input_coordinates_live():
    poly = get_aoi(coordinates=(52.52, 13.4))
    assert isinstance(poly, Polygon)
    assert poly.bounds == (
        13.38526793559592,
        52.51101333875345,
        13.414732236942758,
        52.52898664609028,
    )


@pytest.mark.live
def test_get_aoi_invalid_address_raises():
    with pytest.raises(GeoCodingError):
        get_aoi("not_an_address")


def test_explode_multigeoemtries():
    poly1 = Polygon([[0, 0], [1, 0], [1, 1], [0, 1], [0, 0]])
    poly2 = Polygon([[0, 0], [2, 0], [2, 2], [0, 2], [0, 0]])
    multipoly = MultiPolygon([poly1, poly2])
    df = gpd.GeoDataFrame(
        pd.DataFrame([0, 1], columns=["id"]),
        crs="EPSG:4326",
        geometry=[poly1, multipoly],
    )
    df_result = explode_multigeometries(df)

    assert df.shape[0] != df_result.shape[0]
    assert df_result.shape[0] == 3


File: /prettymapp/tests/test_main.py
Content:
import pytest
from geopandas import GeoDataFrame
from shapely.geometry import box
from pyproj import CRS

from prettymapp.osm import get_osm_geometries
from prettymapp.plotting import Plot
from prettymapp.settings import STYLES

AOI = box(
    13.373621926483281, 52.507705884952586, 13.374621926483281, 52.508705884952586
)
AOI_UTM_CRS = CRS.from_user_input(32632)


@pytest.mark.live
def test_get_geometries_live():
    df = get_osm_geometries(AOI)
    assert isinstance(df, GeoDataFrame)
    assert not df.empty


@pytest.mark.live
def test_osm_live():
    df = get_osm_geometries(AOI)
    fig = Plot(df=df, aoi_bounds=AOI.bounds, draw_settings=STYLES["Peach"]).plot_all()
    assert fig is not None
    # assert isinstance(fig, int)
    # import matplotlib.pyplot as plt
    # plt.show()


# def test_osm_liveaa():
#     from prettymapp.geo import get_aoi
#
#     aoi, aoi_utm_crs = get_aoi("Miami", radius=1100)
#     df = get_osm_geometries(aoi)
#     fig = Plot(df=df, aoi_bounds=AOI.bounds, draw_settings=STYLES["Peach"]).plot_all()
#     assert fig is not None
#     # assert isinstance(fig, int)
#     # import matplotlib.pyplot as plt
#     # plt.show()


File: /prettymapp/tests/test_osm.py
Content:
from prettymapp.osm import get_osm_tags, get_osm_geometries_from_xml


def test_get_osm_tags():
    tags = get_osm_tags()
    assert tags == {
        "building": True,
        "landuse": [
            "construction",
            "commercial",
            "forest",
            "grass",
            "vineyard",
            "orchard",
            "village_green",
        ],
        "natural": ["water", "bay", "island", "wood"],
        "place": ["sea"],
        "leisure": ["swimming_pool", "park", "pitch", "garden", "golf_course"],
        "highway": [
            "motorway",
            "trunk",
            "primary",
            "secondary",
            "tertiary",
            "cycleway",
            "residential",
            "service",
            "unclassified",
            "footway",
            "motorway_link",
            "pedestrian",
        ],
        "railway": True,
        "amenity": ["parking"],
        "man_made": ["pier"],
    }


def test_get_osm_geometries_from_xml():
    filepath = "./mock_data/osm_export_xml.osm"
    df = get_osm_geometries_from_xml(filepath)
    assert df.shape == (18, 3)


File: /prettymapp/tests/test_plotting.py
Content:
from prettymapp.plotting import adjust_lightness


def test_adjust_lightness():
    color = adjust_lightness("#FFC857")
    assert isinstance(color, tuple)
    assert len(color) == 3
    assert color == (0.6705882352941177, 0.4510504201680673, 0.0)


File: /prettymapp/tests/mock_data/df_pre_adjusting.pickle
Content: Skipped due to missing encoding

File: /prettymapp/tests/mock_data/osm_export_xml.osm
Content:
<?xml version="1.0" encoding="UTF-8"?>
<osm version="0.6" generator="CGImap 0.9.1 (3701965 spike-06.openstreetmap.org)" copyright="OpenStreetMap and contributors" attribution="http://www.openstreetmap.org/copyright" license="http://opendatacommons.org/licenses/odbl/1-0/">
 <bounds minlat="52.5083900" minlon="13.3866300" maxlat="52.5091400" maxlon="13.3879700"/>
 <node id="492156662" visible="true" version="4" changeset="30233311" timestamp="2015-04-15T11:24:48Z" user="atpl_pilot" uid="881429" lat="52.5191379" lon="13.4465715"/>
 <node id="492156665" visible="true" version="3" changeset="6820260" timestamp="2010-12-31T14:30:54Z" user="bahnpirat" uid="13203" lat="52.5175276" lon="13.4392688"/>
 <node id="492156670" visible="true" version="4" changeset="96485875" timestamp="2020-12-27T14:18:12Z" user="kartograph" uid="17304" lat="52.5183043" lon="13.4320753">
  <tag k="entrance" v="service"/>
  <tag k="note" v="Zugangsschacht"/>
 </node>
 <node id="492156674" visible="true" version="3" changeset="32048790" timestamp="2015-06-18T12:19:27Z" user="bahnpirat" uid="13203" lat="52.5154462" lon="13.4157265">
  <tag k="entrance" v="service"/>
  <tag k="note" v="Zugangsschacht"/>
 </node>
 <node id="492156678" visible="true" version="2" changeset="6820260" timestamp="2010-12-31T14:30:54Z" user="bahnpirat" uid="13203" lat="52.5126570" lon="13.4088214"/>
 <node id="492156680" visible="true" version="4" changeset="15603982" timestamp="2013-04-04T07:48:57Z" user="sunn_bmixer" uid="141884" lat="52.5104326" lon="13.3918690"/>
 <node id="492156683" visible="true" version="3" changeset="6821426" timestamp="2010-12-31T16:17:27Z" user="bahnpirat" uid="13203" lat="52.5086980" lon="13.3872666"/>
 <node id="492156685" visible="true" version="3" changeset="6821426" timestamp="2010-12-31T16:17:28Z" user="bahnpirat" uid="13203" lat="52.5080737" lon="13.3862206"/>
 <node id="493681827" visible="true" version="3" changeset="44363642" timestamp="2016-12-13T06:00:39Z" user="BeKri" uid="14390" lat="52.5211217" lon="13.4564028"/>
 <node id="544516230" visible="true" version="4" changeset="54059903" timestamp="2017-11-24T21:09:09Z" user="sandrow75" uid="4445038" lat="52.5098716" lon="13.3865052"/>
 <node id="544516233" visible="true" version="2" changeset="28795464" timestamp="2015-02-12T13:23:44Z" user="OSM-Bot" uid="111462" lat="52.5098914" lon="13.3868429"/>
 <node id="544516237" visible="true" version="2" changeset="28795464" timestamp="2015-02-12T13:23:44Z" user="OSM-Bot" uid="111462" lat="52.5096187" lon="13.3868845"/>
 <node id="544516250" visible="true" version="2" changeset="54059903" timestamp="2017-11-24T21:09:09Z" user="sandrow75" uid="4445038" lat="52.5096939" lon="13.3877370"/>
 <node id="544516253" visible="true" version="4" changeset="54059903" timestamp="2017-11-24T21:09:09Z" user="sandrow75" uid="4445038" lat="52.5099232" lon="13.3874787"/>
 <node id="544516255" visible="true" version="2" changeset="3354104" timestamp="2009-12-12T08:36:28Z" user="Elwood" uid="6669" lat="52.5100083" lon="13.3873876"/>
 <node id="544516258" visible="true" version="4" changeset="54059903" timestamp="2017-11-24T21:09:09Z" user="sandrow75" uid="4445038" lat="52.5100619" lon="13.3871964"/>
 <node id="544516262" visible="true" version="5" changeset="54059903" timestamp="2017-11-24T21:09:09Z" user="sandrow75" uid="4445038" lat="52.5100639" lon="13.3870468"/>
 <node id="544516266" visible="true" version="6" changeset="54059903" timestamp="2017-11-24T21:09:09Z" user="sandrow75" uid="4445038" lat="52.5100195" lon="13.3864789"/>
 <node id="544516739" visible="true" version="3" changeset="54059903" timestamp="2017-11-24T21:09:09Z" user="sandrow75" uid="4445038" lat="52.5091146" lon="13.3859590"/>
 <node id="544516742" visible="true" version="2" changeset="54059903" timestamp="2017-11-24T21:09:09Z" user="sandrow75" uid="4445038" lat="52.5091340" lon="13.3868775"/>
 <node id="544516743" visible="true" version="2" changeset="54059903" timestamp="2017-11-24T21:09:09Z" user="sandrow75" uid="4445038" lat="52.5091924" lon="13.3871068"/>
 <node id="544516745" visible="true" version="3" changeset="54059903" timestamp="2017-11-24T21:09:09Z" user="sandrow75" uid="4445038" lat="52.5092557" lon="13.3873650"/>
 <node id="544516747" visible="true" version="5" changeset="143414121" timestamp="2023-10-31T10:49:08Z" user="Supaplex030" uid="418040" lat="52.5094865" lon="13.3879321"/>
 <node id="544516772" visible="true" version="3" changeset="54059903" timestamp="2017-11-24T21:09:09Z" user="sandrow75" uid="4445038" lat="52.5095675" lon="13.3862953"/>
 <node id="544516774" visible="true" version="2" changeset="28795464" timestamp="2015-02-12T13:23:45Z" user="OSM-Bot" uid="111462" lat="52.5096364" lon="13.3862795"/>
 <node id="544516775" visible="true" version="2" changeset="28795464" timestamp="2015-02-12T13:23:45Z" user="OSM-Bot" uid="111462" lat="52.5096116" lon="13.3858772"/>
 <node id="544516777" visible="true" version="2" changeset="28795464" timestamp="2015-02-12T13:23:45Z" user="OSM-Bot" uid="111462" lat="52.5094523" lon="13.3859041"/>
 <node id="544516780" visible="true" version="3" changeset="54059903" timestamp="2017-11-24T21:09:09Z" user="sandrow75" uid="4445038" lat="52.5094715" lon="13.3861495"/>
 <node id="544516782" visible="true" version="3" changeset="54059903" timestamp="2017-11-24T21:09:09Z" user="sandrow75" uid="4445038" lat="52.5092811" lon="13.3861863"/>
 <node id="544516785" visible="true" version="3" changeset="28795464" timestamp="2015-02-12T13:23:45Z" user="OSM-Bot" uid="111462" lat="52.5092693" lon="13.3859324"/>
 <node id="587629294" visible="true" version="5" changeset="143414121" timestamp="2023-10-31T10:49:08Z" user="Supaplex030" uid="418040" lat="52.5085878" lon="13.3881272"/>
 <node id="587629295" visible="true" version="5" changeset="143414121" timestamp="2023-10-31T10:49:08Z" user="Supaplex030" uid="418040" lat="52.5086268" lon="13.3880583"/>
 <node id="587629296" visible="true" version="3" changeset="113745015" timestamp="2021-11-13T20:56:13Z" user="kjon" uid="44217" lat="52.5087179" lon="13.3881997"/>
 <node id="587629298" visible="true" version="2" changeset="55258573" timestamp="2018-01-08T09:07:09Z" user="sandrow75" uid="4445038" lat="52.5088416" lon="13.3878437"/>
 <node id="587629299" visible="true" version="2" changeset="55258573" timestamp="2018-01-08T09:07:09Z" user="sandrow75" uid="4445038" lat="52.5091240" lon="13.3877909"/>
 <node id="587629300" visible="true" version="2" changeset="55258573" timestamp="2018-01-08T09:07:09Z" user="sandrow75" uid="4445038" lat="52.5091260" lon="13.3879561"/>
 <node id="587629301" visible="true" version="2" changeset="55258573" timestamp="2018-01-08T09:07:09Z" user="sandrow75" uid="4445038" lat="52.5089508" lon="13.3879642"/>
 <node id="587629302" visible="true" version="2" changeset="55258573" timestamp="2018-01-08T09:07:09Z" user="sandrow75" uid="4445038" lat="52.5090719" lon="13.3881056"/>
 <node id="587629303" visible="true" version="2" changeset="55258573" timestamp="2018-01-08T09:07:09Z" user="sandrow75" uid="4445038" lat="52.5089061" lon="13.3880111"/>
 <node id="587629304" visible="true" version="2" changeset="55258573" timestamp="2018-01-08T09:07:09Z" user="sandrow75" uid="4445038" lat="52.5090400" lon="13.3880426"/>
 <node id="587629305" visible="true" version="2" changeset="55258573" timestamp="2018-01-08T09:07:09Z" user="sandrow75" uid="4445038" lat="52.5091510" lon="13.3880223"/>
 <node id="587629306" visible="true" version="2" changeset="55258573" timestamp="2018-01-08T09:07:09Z" user="sandrow75" uid="4445038" lat="52.5090180" lon="13.3881581"/>
 <node id="587629307" visible="true" version="2" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5090864" lon="13.3875361"/>
 <node id="587629335" visible="true" version="3" changeset="55258573" timestamp="2018-01-08T09:07:10Z" user="sandrow75" uid="4445038" lat="52.5087569" lon="13.3888025"/>
 <node id="587629337" visible="true" version="4" changeset="143414121" timestamp="2023-10-31T10:49:08Z" user="Supaplex030" uid="418040" lat="52.5088349" lon="13.3883799"/>
 <node id="587629338" visible="true" version="3" changeset="143414121" timestamp="2023-10-31T10:49:08Z" user="Supaplex030" uid="418040" lat="52.5089209" lon="13.3885137"/>
 <node id="587629339" visible="true" version="4" changeset="143414121" timestamp="2023-10-31T10:49:08Z" user="Supaplex030" uid="418040" lat="52.5089376" lon="13.3882768"/>
 <node id="587629341" visible="true" version="3" changeset="143414121" timestamp="2023-10-31T10:49:08Z" user="Supaplex030" uid="418040" lat="52.5090464" lon="13.3883797"/>
 <node id="587629342" visible="true" version="3" changeset="55258573" timestamp="2018-01-08T09:07:10Z" user="sandrow75" uid="4445038" lat="52.5084791" lon="13.3892942"/>
 <node id="587629343" visible="true" version="3" changeset="55258573" timestamp="2018-01-08T09:07:10Z" user="sandrow75" uid="4445038" lat="52.5086771" lon="13.3889448"/>
 <node id="587629345" visible="true" version="2" changeset="54059903" timestamp="2017-11-24T21:09:10Z" user="sandrow75" uid="4445038" lat="52.5091634" lon="13.3874573"/>
 <node id="587629348" visible="true" version="2" changeset="143414121" timestamp="2023-10-31T10:49:08Z" user="Supaplex030" uid="418040" lat="52.5093081" lon="13.3881137"/>
 <node id="587629349" visible="true" version="2" changeset="55258573" timestamp="2018-01-08T09:07:10Z" user="sandrow75" uid="4445038" lat="52.5091982" lon="13.3879741"/>
 <node id="587629350" visible="true" version="1" changeset="3354104" timestamp="2009-12-12T08:29:33Z" user="Elwood" uid="6669" lat="52.5091692" lon="13.3877476"/>
 <node id="587629351" visible="true" version="3" changeset="143414121" timestamp="2023-10-31T10:49:08Z" user="Supaplex030" uid="418040" lat="52.5093831" lon="13.3880366"/>
 <node id="587629352" visible="true" version="1" changeset="3354104" timestamp="2009-12-12T08:29:33Z" user="Elwood" uid="6669" lat="52.5093263" lon="13.3878897"/>
 <node id="587629355" visible="true" version="1" changeset="3354104" timestamp="2009-12-12T08:29:33Z" user="Elwood" uid="6669" lat="52.5092736" lon="13.3877462"/>
 <node id="587629357" visible="true" version="2" changeset="54059903" timestamp="2017-11-24T21:09:10Z" user="sandrow75" uid="4445038" lat="52.5092044" lon="13.3875601"/>
 <node id="611603874" visible="true" version="3" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5090239" lon="13.3869145"/>
 <node id="611603876" visible="true" version="3" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5091173" lon="13.3876206"/>
 <node id="611603877" visible="true" version="4" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5089866" lon="13.3876578"/>
 <node id="611603878" visible="true" version="3" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5089620" lon="13.3875545"/>
 <node id="611603879" visible="true" version="6" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5089316" lon="13.3875840"/>
 <node id="611603881" visible="true" version="3" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5088264" lon="13.3869828"/>
 <node id="611604494" visible="true" version="3" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5086911" lon="13.3867635"/>
 <node id="611604502" visible="true" version="5" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5084271" lon="13.3868437"/>
 <node id="611604505" visible="true" version="4" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5084529" lon="13.3874386"/>
 <node id="611604508" visible="true" version="2" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5087254" lon="13.3874008"/>
 <node id="611605327" visible="true" version="3" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5088634" lon="13.3873810"/>
 <node id="611605329" visible="true" version="3" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5089198" lon="13.3873475"/>
 <node id="611605332" visible="true" version="3" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5089080" lon="13.3873029"/>
 <node id="611605335" visible="true" version="3" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5088511" lon="13.3873380"/>
 <node id="611605338" visible="true" version="2" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5087248" lon="13.3873711"/>
 <node id="611605917" visible="true" version="2" changeset="133080675" timestamp="2023-02-27T10:19:25Z" user="momabebra" uid="9508237" lat="52.5084651" lon="13.3865848"/>
 <node id="611605928" visible="true" version="2" changeset="133080675" timestamp="2023-02-27T10:19:25Z" user="momabebra" uid="9508237" lat="52.5086822" lon="13.3864748"/>
 <node id="611655192" visible="true" version="3" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5084985" lon="13.3868244"/>
 <node id="611655925" visible="true" version="8" changeset="128695379" timestamp="2022-11-09T16:34:19Z" user="!MRGBoss" uid="8970395" lat="52.5082225" lon="13.3861532"/>
 <node id="611655927" visible="true" version="8" changeset="128695379" timestamp="2022-11-09T16:34:19Z" user="!MRGBoss" uid="8970395" lat="52.5082052" lon="13.3862813"/>
 <node id="611655928" visible="true" version="8" changeset="128695379" timestamp="2022-11-09T16:34:19Z" user="!MRGBoss" uid="8970395" lat="52.5081626" lon="13.3864069"/>
 <node id="611655930" visible="true" version="8" changeset="128695379" timestamp="2022-11-09T16:34:19Z" user="!MRGBoss" uid="8970395" lat="52.5081101" lon="13.3864923"/>
 <node id="611655931" visible="true" version="8" changeset="128695379" timestamp="2022-11-09T16:34:19Z" user="!MRGBoss" uid="8970395" lat="52.5080407" lon="13.3865567"/>
 <node id="611655932" visible="true" version="8" changeset="128695379" timestamp="2022-11-09T16:34:19Z" user="!MRGBoss" uid="8970395" lat="52.5078925" lon="13.3865844"/>
 <node id="611655934" visible="true" version="8" changeset="128695379" timestamp="2022-11-09T16:34:19Z" user="!MRGBoss" uid="8970395" lat="52.5078197" lon="13.3865500"/>
 <node id="611655935" visible="true" version="8" changeset="128695379" timestamp="2022-11-09T16:34:19Z" user="!MRGBoss" uid="8970395" lat="52.5077892" lon="13.3865245"/>
 <node id="611655936" visible="true" version="9" changeset="128695379" timestamp="2022-11-09T16:34:19Z" user="!MRGBoss" uid="8970395" lat="52.5076906" lon="13.3863669"/>
 <node id="611655940" visible="true" version="9" changeset="71236278" timestamp="2019-06-14T01:41:46Z" user="schoschi" uid="231006" lat="52.5076132" lon="13.3863852"/>
 <node id="611655949" visible="true" version="8" changeset="128695379" timestamp="2022-11-09T16:34:19Z" user="!MRGBoss" uid="8970395" lat="52.5080713" lon="13.3856987"/>
 <node id="611655951" visible="true" version="8" changeset="128695379" timestamp="2022-11-09T16:34:19Z" user="!MRGBoss" uid="8970395" lat="52.5081385" lon="13.3857805"/>
 <node id="611655952" visible="true" version="8" changeset="128695379" timestamp="2022-11-09T16:34:19Z" user="!MRGBoss" uid="8970395" lat="52.5081840" lon="13.3858772"/>
 <node id="611656825" visible="true" version="3" changeset="55258573" timestamp="2018-01-08T09:07:10Z" user="sandrow75" uid="4445038" lat="52.5080361" lon="13.3876930"/>
 <node id="611656826" visible="true" version="2" changeset="28823237" timestamp="2015-02-13T15:12:30Z" user="OSM-Bot" uid="111462" lat="52.5076375" lon="13.3877448"/>
 <node id="611656829" visible="true" version="4" changeset="77250152" timestamp="2019-11-18T23:09:36Z" user="RoterEmil" uid="4179530" lat="52.5083276" lon="13.3883266"/>
 <node id="611656833" visible="true" version="2" changeset="28823237" timestamp="2015-02-13T15:12:30Z" user="OSM-Bot" uid="111462" lat="52.5082049" lon="13.3883409"/>
 <node id="611656869" visible="true" version="4" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5088617" lon="13.3876078"/>
 <node id="611656871" visible="true" version="3" changeset="55258573" timestamp="2018-01-08T09:07:10Z" user="sandrow75" uid="4445038" lat="52.5080274" lon="13.3874979"/>
 <node id="611656872" visible="true" version="3" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5088532" lon="13.3874633"/>
 <node id="611657553" visible="true" version="6" changeset="55258573" timestamp="2018-01-08T09:07:10Z" user="sandrow75" uid="4445038" lat="52.5076863" lon="13.3886129">
  <tag k="addr:city" v="Berlin"/>
  <tag k="addr:country" v="DE"/>
  <tag k="addr:housenumber" v="88"/>
  <tag k="addr:postcode" v="10117"/>
  <tag k="addr:street" v="Zimmerstra√üe"/>
  <tag k="addr:suburb" v="Mitte"/>
 </node>
 <node id="611658334" visible="true" version="5" changeset="55258573" timestamp="2018-01-08T09:07:10Z" user="sandrow75" uid="4445038" lat="52.5076426" lon="13.3878492">
  <tag k="addr:city" v="Berlin"/>
  <tag k="addr:country" v="DE"/>
  <tag k="addr:housenumber" v="91"/>
  <tag k="addr:postcode" v="10117"/>
  <tag k="addr:street" v="Zimmerstra√üe"/>
  <tag k="addr:suburb" v="Mitte"/>
 </node>
 <node id="611658339" visible="true" version="4" changeset="55258573" timestamp="2018-01-08T09:07:11Z" user="sandrow75" uid="4445038" lat="52.5076504" lon="13.3879961">
  <tag k="addr:city" v="Berlin"/>
  <tag k="addr:country" v="DE"/>
  <tag k="addr:housenumber" v="90"/>
  <tag k="addr:postcode" v="10117"/>
  <tag k="addr:street" v="Zimmerstra√üe"/>
  <tag k="addr:suburb" v="Mitte"/>
 </node>
 <node id="611658343" visible="true" version="4" changeset="55258573" timestamp="2018-01-08T09:07:11Z" user="sandrow75" uid="4445038" lat="52.5076714" lon="13.3883406">
  <tag k="addr:city" v="Berlin"/>
  <tag k="addr:country" v="DE"/>
  <tag k="addr:housenumber" v="89"/>
  <tag k="addr:postcode" v="10117"/>
  <tag k="addr:street" v="Zimmerstra√üe"/>
  <tag k="addr:suburb" v="Mitte"/>
 </node>
 <node id="611661447" visible="true" version="5" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5084832" lon="13.3875198"/>
 <node id="611661458" visible="true" version="2" changeset="9655074" timestamp="2011-10-25T19:16:42Z" user="kaiD" uid="282726" lat="52.5085968" lon="13.3860114"/>
 <node id="819148943" visible="true" version="2" changeset="133080675" timestamp="2023-02-27T10:19:25Z" user="momabebra" uid="9508237" lat="52.5086737" lon="13.3866099"/>
 <node id="819148948" visible="true" version="2" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5088412" lon="13.3871505"/>
 <node id="819148952" visible="true" version="2" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5088910" lon="13.3874579"/>
 <node id="819148956" visible="true" version="2" changeset="77250152" timestamp="2019-11-18T23:09:36Z" user="RoterEmil" uid="4179530" lat="52.5088945" lon="13.3876269"/>
 <node id="951271293" visible="true" version="3" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5088679" lon="13.3869654"/>
 <node id="951271309" visible="true" version="3" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5087033" lon="13.3870413"/>
 <node id="951271335" visible="true" version="2" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5088195" lon="13.3867044"/>
 <node id="1075339102" visible="true" version="1" changeset="6820260" timestamp="2010-12-31T14:30:52Z" user="bahnpirat" uid="13203" lat="52.5116642" lon="13.4064455"/>
 <node id="1075339106" visible="true" version="1" changeset="6820260" timestamp="2010-12-31T14:30:52Z" user="bahnpirat" uid="13203" lat="52.5180953" lon="13.4287352"/>
 <node id="1075339110" visible="true" version="2" changeset="6821426" timestamp="2010-12-31T16:17:27Z" user="bahnpirat" uid="13203" lat="52.5093728" lon="13.3894408"/>
 <node id="1075339113" visible="true" version="1" changeset="6820260" timestamp="2010-12-31T14:30:52Z" user="bahnpirat" uid="13203" lat="52.5175848" lon="13.4410235"/>
 <node id="1075339131" visible="true" version="1" changeset="6820260" timestamp="2010-12-31T14:30:52Z" user="bahnpirat" uid="13203" lat="52.5178671" lon="13.4426924"/>
 <node id="1075339135" visible="true" version="1" changeset="6820260" timestamp="2010-12-31T14:30:52Z" user="bahnpirat" uid="13203" lat="52.5212799" lon="13.4549517"/>
 <node id="1075339140" visible="true" version="1" changeset="6820260" timestamp="2010-12-31T14:30:53Z" user="bahnpirat" uid="13203" lat="52.5171800" lon="13.4224530"/>
 <node id="1075339145" visible="true" version="1" changeset="6820260" timestamp="2010-12-31T14:30:53Z" user="bahnpirat" uid="13203" lat="52.5063540" lon="13.3826956"/>
 <node id="1075339150" visible="true" version="1" changeset="6820260" timestamp="2010-12-31T14:30:53Z" user="bahnpirat" uid="13203" lat="52.5138776" lon="13.4117327"/>
 <node id="1075481745" visible="true" version="1" changeset="6821426" timestamp="2010-12-31T16:17:27Z" user="bahnpirat" uid="13203" lat="52.5109952" lon="13.3956260"/>
 <node id="1075481751" visible="true" version="1" changeset="6821426" timestamp="2010-12-31T16:17:27Z" user="bahnpirat" uid="13203" lat="52.5068542" lon="13.3843242"/>
 <node id="1075481754" visible="true" version="1" changeset="6821426" timestamp="2010-12-31T16:17:27Z" user="bahnpirat" uid="13203" lat="52.5095158" lon="13.3914246"/>
 <node id="1075481757" visible="true" version="1" changeset="6821426" timestamp="2010-12-31T16:17:27Z" user="bahnpirat" uid="13203" lat="52.5075892" lon="13.3856112"/>
 <node id="1075481759" visible="true" version="1" changeset="6821426" timestamp="2010-12-31T16:17:27Z" user="bahnpirat" uid="13203" lat="52.5092213" lon="13.3884543"/>
 <node id="1480406625" visible="true" version="1" changeset="9655074" timestamp="2011-10-25T19:16:42Z" user="kaiD" uid="282726" lat="52.5086942" lon="13.3857460"/>
 <node id="1609970609" visible="true" version="4" changeset="55258573" timestamp="2018-01-08T09:07:12Z" user="sandrow75" uid="4445038" lat="52.5076646" lon="13.3882342"/>
 <node id="1786351999" visible="true" version="3" changeset="144821423" timestamp="2023-12-06T09:43:36Z" user="Uwe_Sand" uid="16850657" lat="52.5087801" lon="13.3872200">
  <tag k="leisure" v="arena"/>
  <tag k="name" v="E-Werk"/>
  <tag k="website" v="https://ewerk.net/"/>
  <tag k="wheelchair" v="limited"/>
 </node>
 <node id="1985867576" visible="true" version="2" changeset="28795464" timestamp="2015-02-12T13:23:43Z" user="OSM-Bot" uid="111462" lat="52.5099870" lon="13.3858228"/>
 <node id="2247733132" visible="true" version="1" changeset="15603982" timestamp="2013-04-04T07:48:56Z" user="sunn_bmixer" uid="141884" lat="52.5107872" lon="13.3925499"/>
 <node id="2247733133" visible="true" version="1" changeset="15603982" timestamp="2013-04-04T07:48:56Z" user="sunn_bmixer" uid="141884" lat="52.5095563" lon="13.3920138"/>
 <node id="2247733137" visible="true" version="1" changeset="15603982" timestamp="2013-04-04T07:48:56Z" user="sunn_bmixer" uid="141884" lat="52.5105982" lon="13.3920430"/>
 <node id="2498327694" visible="true" version="2" changeset="47822663" timestamp="2017-04-15T19:22:03Z" user="RoterEmil" uid="4179530" lat="52.5082292" lon="13.3853513"/>
 <node id="2498327700" visible="true" version="2" changeset="47822663" timestamp="2017-04-15T19:22:03Z" user="RoterEmil" uid="4179530" lat="52.5079373" lon="13.3854872"/>
 <node id="2498327702" visible="true" version="3" changeset="128695379" timestamp="2022-11-09T16:34:19Z" user="!MRGBoss" uid="8970395" lat="52.5079674" lon="13.3856455"/>
 <node id="2498327725" visible="true" version="3" changeset="128695379" timestamp="2022-11-09T16:34:19Z" user="!MRGBoss" uid="8970395" lat="52.5079728" lon="13.3865856"/>
 <node id="2498327735" visible="true" version="4" changeset="128695379" timestamp="2022-11-09T16:34:19Z" user="!MRGBoss" uid="8970395" lat="52.5077420" lon="13.3864676"/>
 <node id="2690299109" visible="true" version="3" changeset="96070944" timestamp="2020-12-18T12:38:19Z" user="bahnpirat" uid="13203" lat="52.5033947" lon="13.3689638"/>
 <node id="2842306624" visible="true" version="3" changeset="34530496" timestamp="2015-10-09T14:35:47Z" user="g0ldfish" uid="45180" lat="52.5089636" lon="13.3874863">
  <tag k="addr:city" v="Berlin"/>
  <tag k="addr:country" v="DE"/>
  <tag k="addr:housenumber" v="79"/>
  <tag k="addr:postcode" v="10117"/>
  <tag k="addr:street" v="Mauerstra√üe"/>
  <tag k="addr:suburb" v="Mitte"/>
  <tag k="source" v="Geoportal Berlin / Hauskoordinaten"/>
 </node>
 <node id="2990843334" visible="true" version="2" changeset="55258573" timestamp="2018-01-08T09:07:12Z" user="sandrow75" uid="4445038" lat="52.5079985" lon="13.3901359"/>
 <node id="3345707089" visible="true" version="1" changeset="28795464" timestamp="2015-02-12T13:23:32Z" user="OSM-Bot" uid="111462" lat="52.5099231" lon="13.3864954"/>
 <node id="3602509281" visible="true" version="1" changeset="32048790" timestamp="2015-06-18T12:17:31Z" user="bahnpirat" uid="13203" lat="52.5214751" lon="13.4566015"/>
 <node id="3602509284" visible="true" version="3" changeset="108333921" timestamp="2021-07-20T18:16:35Z" user="bahnpirat" uid="13203" lat="52.5214124" lon="13.4565656"/>
 <node id="3790683855" visible="true" version="4" changeset="128695379" timestamp="2022-11-09T16:34:19Z" user="!MRGBoss" uid="8970395" lat="52.5082174" lon="13.3860206"/>
 <node id="4563373790" visible="true" version="5" changeset="71236278" timestamp="2019-06-14T01:41:46Z" user="schoschi" uid="231006" lat="52.5076512" lon="13.3863784"/>
 <node id="4795634779" visible="true" version="1" changeset="47822663" timestamp="2017-04-15T19:22:02Z" user="RoterEmil" uid="4179530" lat="52.5080368" lon="13.3854406">
  <tag k="barrier" v="gate"/>
 </node>
 <node id="4795634785" visible="true" version="2" changeset="128695379" timestamp="2022-11-09T16:34:19Z" user="!MRGBoss" uid="8970395" lat="52.5080199" lon="13.3856635"/>
 <node id="4795634793" visible="true" version="2" changeset="71236278" timestamp="2019-06-14T01:41:46Z" user="schoschi" uid="231006" lat="52.5076480" lon="13.3869631"/>
 <node id="4795634794" visible="true" version="3" changeset="71236278" timestamp="2019-06-14T01:41:46Z" user="schoschi" uid="231006" lat="52.5076173" lon="13.3864481"/>
 <node id="4795634800" visible="true" version="2" changeset="71236278" timestamp="2019-06-14T01:41:46Z" user="schoschi" uid="231006" lat="52.5076417" lon="13.3868566"/>
 <node id="4795634801" visible="true" version="2" changeset="71236278" timestamp="2019-06-14T01:41:46Z" user="schoschi" uid="231006" lat="52.5076333" lon="13.3867181"/>
 <node id="4795634803" visible="true" version="2" changeset="71236278" timestamp="2019-06-14T01:41:46Z" user="schoschi" uid="231006" lat="52.5076280" lon="13.3866284"/>
 <node id="4795634804" visible="true" version="2" changeset="71236278" timestamp="2019-06-14T01:41:46Z" user="schoschi" uid="231006" lat="52.5076242" lon="13.3865665"/>
 <node id="5246291307" visible="true" version="1" changeset="54059903" timestamp="2017-11-24T21:09:08Z" user="sandrow75" uid="4445038" lat="52.5095809" lon="13.3865148"/>
 <node id="5246291308" visible="true" version="1" changeset="54059903" timestamp="2017-11-24T21:09:09Z" user="sandrow75" uid="4445038" lat="52.5095940" lon="13.3865133"/>
 <node id="5246291309" visible="true" version="1" changeset="54059903" timestamp="2017-11-24T21:09:09Z" user="sandrow75" uid="4445038" lat="52.5100530" lon="13.3870476"/>
 <node id="5246291310" visible="true" version="1" changeset="54059903" timestamp="2017-11-24T21:09:09Z" user="sandrow75" uid="4445038" lat="52.5100698" lon="13.3871430"/>
 <node id="5246291311" visible="true" version="1" changeset="54059903" timestamp="2017-11-24T21:09:09Z" user="sandrow75" uid="4445038" lat="52.5100652" lon="13.3871449"/>
 <node id="5246291312" visible="true" version="1" changeset="54059903" timestamp="2017-11-24T21:09:09Z" user="sandrow75" uid="4445038" lat="52.5100507" lon="13.3872585"/>
 <node id="5246291313" visible="true" version="1" changeset="54059903" timestamp="2017-11-24T21:09:09Z" user="sandrow75" uid="4445038" lat="52.5100321" lon="13.3873281"/>
 <node id="5246291314" visible="true" version="1" changeset="54059903" timestamp="2017-11-24T21:09:09Z" user="sandrow75" uid="4445038" lat="52.5099801" lon="13.3874359"/>
 <node id="5246291315" visible="true" version="1" changeset="54059903" timestamp="2017-11-24T21:09:09Z" user="sandrow75" uid="4445038" lat="52.5099816" lon="13.3874455"/>
 <node id="5246291316" visible="true" version="1" changeset="54059903" timestamp="2017-11-24T21:09:09Z" user="sandrow75" uid="4445038" lat="52.5099311" lon="13.3874970"/>
 <node id="5246291317" visible="true" version="2" changeset="143414121" timestamp="2023-10-31T10:49:08Z" user="Supaplex030" uid="418040" lat="52.5094921" lon="13.3879263"/>
 <node id="5246291318" visible="true" version="1" changeset="54059903" timestamp="2017-11-24T21:09:09Z" user="sandrow75" uid="4445038" lat="52.5094953" lon="13.3879335"/>
 <node id="5246291319" visible="true" version="1" changeset="54059903" timestamp="2017-11-24T21:09:09Z" user="sandrow75" uid="4445038" lat="52.5095496" lon="13.3878820"/>
 <node id="5246291320" visible="true" version="1" changeset="54059903" timestamp="2017-11-24T21:09:09Z" user="sandrow75" uid="4445038" lat="52.5095417" lon="13.3878610"/>
 <node id="5246291321" visible="true" version="1" changeset="54059903" timestamp="2017-11-24T21:09:09Z" user="sandrow75" uid="4445038" lat="52.5096329" lon="13.3877713"/>
 <node id="5246291322" visible="true" version="1" changeset="54059903" timestamp="2017-11-24T21:09:09Z" user="sandrow75" uid="4445038" lat="52.5096407" lon="13.3877889"/>
 <node id="5246291323" visible="true" version="1" changeset="54059903" timestamp="2017-11-24T21:09:09Z" user="sandrow75" uid="4445038" lat="52.5096866" lon="13.3877164"/>
 <node id="5246291327" visible="true" version="1" changeset="54059903" timestamp="2017-11-24T21:09:09Z" user="sandrow75" uid="4445038" lat="52.5092674" lon="13.3873529"/>
 <node id="5246291328" visible="true" version="1" changeset="54059903" timestamp="2017-11-24T21:09:09Z" user="sandrow75" uid="4445038" lat="52.5092360" lon="13.3873148"/>
 <node id="5246291329" visible="true" version="1" changeset="54059903" timestamp="2017-11-24T21:09:09Z" user="sandrow75" uid="4445038" lat="52.5092453" lon="13.3873009"/>
 <node id="5246291330" visible="true" version="1" changeset="54059903" timestamp="2017-11-24T21:09:09Z" user="sandrow75" uid="4445038" lat="52.5092163" lon="13.3872132"/>
 <node id="5246291331" visible="true" version="1" changeset="54059903" timestamp="2017-11-24T21:09:09Z" user="sandrow75" uid="4445038" lat="52.5091704" lon="13.3868706"/>
 <node id="5246291332" visible="true" version="1" changeset="54059903" timestamp="2017-11-24T21:09:09Z" user="sandrow75" uid="4445038" lat="52.5091251" lon="13.3867213"/>
 <node id="5246291333" visible="true" version="1" changeset="54059903" timestamp="2017-11-24T21:09:09Z" user="sandrow75" uid="4445038" lat="52.5091611" lon="13.3867166"/>
 <node id="5327026074" visible="true" version="1" changeset="55258573" timestamp="2018-01-08T09:07:08Z" user="sandrow75" uid="4445038" lat="52.5091899" lon="13.3879525"/>
 <node id="5327026075" visible="true" version="1" changeset="55258573" timestamp="2018-01-08T09:07:08Z" user="sandrow75" uid="4445038" lat="52.5091844" lon="13.3879503"/>
 <node id="5327026076" visible="true" version="1" changeset="55258573" timestamp="2018-01-08T09:07:08Z" user="sandrow75" uid="4445038" lat="52.5090102" lon="13.3881372"/>
 <node id="5327026077" visible="true" version="1" changeset="55258573" timestamp="2018-01-08T09:07:08Z" user="sandrow75" uid="4445038" lat="52.5090150" lon="13.3881309"/>
 <node id="5327026078" visible="true" version="1" changeset="55258573" timestamp="2018-01-08T09:07:08Z" user="sandrow75" uid="4445038" lat="52.5090632" lon="13.3880827"/>
 <node id="5327026079" visible="true" version="1" changeset="55258573" timestamp="2018-01-08T09:07:08Z" user="sandrow75" uid="4445038" lat="52.5090580" lon="13.3880884"/>
 <node id="5327026083" visible="true" version="3" changeset="143414121" timestamp="2023-10-31T10:49:08Z" user="Supaplex030" uid="418040" lat="52.5088521" lon="13.3880542"/>
 <node id="5327026084" visible="true" version="3" changeset="143414121" timestamp="2023-10-31T10:49:08Z" user="Supaplex030" uid="418040" lat="52.5088922" lon="13.3881590"/>
 <node id="5327026085" visible="true" version="3" changeset="143414121" timestamp="2023-10-31T10:49:08Z" user="Supaplex030" uid="418040" lat="52.5088799" lon="13.3882416"/>
 <node id="5643775334" visible="true" version="2" changeset="71236278" timestamp="2019-06-14T01:41:46Z" user="schoschi" uid="231006" lat="52.5076371" lon="13.3867804">
  <tag k="entrance" v="main"/>
  <tag k="source" v="survey"/>
 </node>
 <node id="5643775335" visible="true" version="2" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5084932" lon="13.3867925"/>
 <node id="5643775336" visible="true" version="2" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5084259" lon="13.3867999"/>
 <node id="5643775337" visible="true" version="2" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5087303" lon="13.3873538"/>
 <node id="6445576040" visible="true" version="1" changeset="69845502" timestamp="2019-05-03T14:03:04Z" user="BenVaughn" uid="9836027" lat="52.5158817" lon="13.4174161"/>
 <node id="6515398507" visible="true" version="1" changeset="70841471" timestamp="2019-06-01T18:33:22Z" user="kartonage" uid="1497225" lat="52.5077732" lon="13.3901713"/>
 <node id="6539518433" visible="true" version="2" changeset="143414121" timestamp="2023-10-31T10:49:08Z" user="Supaplex030" uid="418040" lat="52.5094544" lon="13.3879645">
  <tag k="access" v="yes"/>
  <tag k="entrance" v="yes"/>
 </node>
 <node id="6539520637" visible="true" version="1" changeset="71140143" timestamp="2019-06-11T12:44:16Z" user="Theo2" uid="143094" lat="52.5100414" lon="13.3872931">
  <tag k="access" v="yes"/>
  <tag k="entrance" v="yes"/>
 </node>
 <node id="6539537171" visible="true" version="1" changeset="71140297" timestamp="2019-06-11T12:47:48Z" user="Theo2" uid="143094" lat="52.5100514" lon="13.3870197"/>
 <node id="6539537174" visible="true" version="1" changeset="71140297" timestamp="2019-06-11T12:47:48Z" user="Theo2" uid="143094" lat="52.5100481" lon="13.3869506"/>
 <node id="6546360903" visible="true" version="1" changeset="71236278" timestamp="2019-06-14T01:41:46Z" user="schoschi" uid="231006" lat="52.5077449" lon="13.3877308"/>
 <node id="6988473427" visible="true" version="1" changeset="77250152" timestamp="2019-11-18T23:09:36Z" user="RoterEmil" uid="4179530" lat="52.5090442" lon="13.3879875"/>
 <node id="6988473428" visible="true" version="3" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5085391" lon="13.3876589"/>
 <node id="6988473429" visible="true" version="2" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5085418" lon="13.3880518"/>
 <node id="6988473430" visible="true" version="2" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5083129" lon="13.3880840"/>
 <node id="6988473432" visible="true" version="3" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5081739" lon="13.3878374"/>
 <node id="6988473433" visible="true" version="3" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5084603" lon="13.3877545"/>
 <node id="7511737969" visible="true" version="1" changeset="85096806" timestamp="2020-05-12T16:35:02Z" user="Maracuja" uid="484233" lat="52.5181299" lon="13.4293298"/>
 <node id="8144770844" visible="true" version="3" changeset="144719711" timestamp="2023-12-03T12:27:51Z" user="StefanHRT" uid="10961311" lat="52.5077333" lon="13.3869935"/>
 <node id="8144770849" visible="true" version="2" changeset="113745015" timestamp="2021-11-13T20:56:13Z" user="kjon" uid="44217" lat="52.5079261" lon="13.3873661"/>
 <node id="8144770852" visible="true" version="2" changeset="113745015" timestamp="2021-11-13T20:56:13Z" user="kjon" uid="44217" lat="52.5080908" lon="13.3873244"/>
 <node id="8144770854" visible="true" version="2" changeset="113745015" timestamp="2021-11-13T20:56:13Z" user="kjon" uid="44217" lat="52.5081694" lon="13.3874718"/>
 <node id="8144770855" visible="true" version="2" changeset="113745015" timestamp="2021-11-13T20:56:13Z" user="kjon" uid="44217" lat="52.5081648" lon="13.3875432"/>
 <node id="8144770857" visible="true" version="3" changeset="117183504" timestamp="2022-02-09T03:48:07Z" user="StefanHRT" uid="10961311" lat="52.5082440" lon="13.3876912"/>
 <node id="8144770867" visible="true" version="2" changeset="113745015" timestamp="2021-11-13T20:56:13Z" user="kjon" uid="44217" lat="52.5084253" lon="13.3876187"/>
 <node id="8144770868" visible="true" version="3" changeset="117183504" timestamp="2022-02-09T03:48:07Z" user="StefanHRT" uid="10961311" lat="52.5085784" lon="13.3878587"/>
 <node id="9182724578" visible="true" version="1" changeset="112695486" timestamp="2021-10-19T12:13:28Z" user="StefanHRT" uid="10961311" lat="52.5175832" lon="13.4409754"/>
 <node id="9249094030" visible="true" version="2" changeset="117183504" timestamp="2022-02-09T03:48:07Z" user="StefanHRT" uid="10961311" lat="52.5085451" lon="13.3877593"/>
 <node id="9249094031" visible="true" version="2" changeset="117183504" timestamp="2022-02-09T03:48:07Z" user="StefanHRT" uid="10961311" lat="52.5086378" lon="13.3878546"/>
 <node id="9249094032" visible="true" version="2" changeset="117183504" timestamp="2022-02-09T03:48:07Z" user="StefanHRT" uid="10961311" lat="52.5087883" lon="13.3877005"/>
 <node id="9249094033" visible="true" version="1" changeset="113745015" timestamp="2021-11-13T20:56:13Z" user="kjon" uid="44217" lat="52.5084295" lon="13.3874380"/>
 <node id="9249094035" visible="true" version="2" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5090548" lon="13.3876200"/>
 <node id="9249094036" visible="true" version="2" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5090675" lon="13.3876659"/>
 <node id="9249094037" visible="true" version="2" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5089815" lon="13.3875860"/>
 <node id="9249094038" visible="true" version="2" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5089943" lon="13.3875444"/>
 <node id="9249094039" visible="true" version="2" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5089959" lon="13.3875662"/>
 <node id="9249094040" visible="true" version="2" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5090017" lon="13.3876741"/>
 <node id="9249094041" visible="true" version="2" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5089945" lon="13.3876724"/>
 <node id="9249094042" visible="true" version="2" changeset="143414121" timestamp="2023-10-31T10:49:08Z" user="Supaplex030" uid="418040" lat="52.5088641" lon="13.3881778"/>
 <node id="9249094043" visible="true" version="2" changeset="143414121" timestamp="2023-10-31T10:49:08Z" user="Supaplex030" uid="418040" lat="52.5089118" lon="13.3882092"/>
 <node id="9249094044" visible="true" version="1" changeset="113745015" timestamp="2021-11-13T20:56:13Z" user="kjon" uid="44217" lat="52.5077446" lon="13.3870148"/>
 <node id="9249094045" visible="true" version="1" changeset="113745015" timestamp="2021-11-13T20:56:13Z" user="kjon" uid="44217" lat="52.5083913" lon="13.3869109"/>
 <node id="9249094046" visible="true" version="2" changeset="117183504" timestamp="2022-02-09T03:48:07Z" user="StefanHRT" uid="10961311" lat="52.5083748" lon="13.3876628"/>
 <node id="9249094047" visible="true" version="1" changeset="113745015" timestamp="2021-11-13T20:56:13Z" user="kjon" uid="44217" lat="52.5086766" lon="13.3876890"/>
 <node id="9249094048" visible="true" version="2" changeset="117183504" timestamp="2022-02-09T03:48:07Z" user="StefanHRT" uid="10961311" lat="52.5086091" lon="13.3879575"/>
 <node id="9249094049" visible="true" version="2" changeset="117183504" timestamp="2022-02-09T03:48:07Z" user="StefanHRT" uid="10961311" lat="52.5087991" lon="13.3877796">
  <tag k="noexit" v="yes"/>
 </node>
 <node id="9249094052" visible="true" version="1" changeset="113745015" timestamp="2021-11-13T20:56:13Z" user="kjon" uid="44217" lat="52.5079489" lon="13.3873603"/>
 <node id="9491269598" visible="true" version="1" changeset="117183504" timestamp="2022-02-09T03:48:07Z" user="StefanHRT" uid="10961311" lat="52.5086725" lon="13.3879092"/>
 <node id="9491269599" visible="true" version="1" changeset="117183504" timestamp="2022-02-09T03:48:07Z" user="StefanHRT" uid="10961311" lat="52.5087831" lon="13.3877241"/>
 <node id="9491269600" visible="true" version="1" changeset="117183504" timestamp="2022-02-09T03:48:07Z" user="StefanHRT" uid="10961311" lat="52.5087922" lon="13.3877488"/>
 <node id="9491269601" visible="true" version="1" changeset="117183504" timestamp="2022-02-09T03:48:07Z" user="StefanHRT" uid="10961311" lat="52.5086488" lon="13.3878925"/>
 <node id="9491269602" visible="true" version="1" changeset="117183504" timestamp="2022-02-09T03:48:07Z" user="StefanHRT" uid="10961311" lat="52.5086396" lon="13.3878679"/>
 <node id="9491269603" visible="true" version="1" changeset="117183504" timestamp="2022-02-09T03:48:07Z" user="StefanHRT" uid="10961311" lat="52.5088146" lon="13.3877041"/>
 <node id="9491269604" visible="true" version="1" changeset="117183504" timestamp="2022-02-09T03:48:07Z" user="StefanHRT" uid="10961311" lat="52.5088391" lon="13.3877615"/>
 <node id="9573704527" visible="true" version="1" changeset="118411695" timestamp="2022-03-12T20:31:02Z" user="kartonage" uid="1497225" lat="52.5213104" lon="13.4554939"/>
 <node id="9698968069" visible="true" version="1" changeset="120277033" timestamp="2022-04-27T20:55:51Z" user="user_14771166" uid="14771166" lat="52.5088616" lon="13.3886209"/>
 <node id="9710801101" visible="true" version="1" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5084194" lon="13.3877715"/>
 <node id="9710801102" visible="true" version="1" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5084206" lon="13.3877997"/>
 <node id="9710801103" visible="true" version="1" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5085014" lon="13.3878634"/>
 <node id="9710801106" visible="true" version="1" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5089016" lon="13.3873068"/>
 <node id="9710801107" visible="true" version="1" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5089119" lon="13.3873522"/>
 <node id="9710801108" visible="true" version="1" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5088495" lon="13.3870735"/>
 <node id="9710801109" visible="true" version="1" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5087842" lon="13.3870809"/>
 <node id="9710801110" visible="true" version="1" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5087781" lon="13.3869863"/>
 <node id="9710801111" visible="true" version="1" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5087170" lon="13.3872923"/>
 <node id="9710801112" visible="true" version="1" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5087420" lon="13.3872901"/>
 <node id="9710801113" visible="true" version="1" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5087557" lon="13.3873126"/>
 <node id="9710801114" visible="true" version="1" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5087573" lon="13.3873503"/>
 <node id="9710801115" visible="true" version="1" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5088551" lon="13.3873356"/>
 <node id="9710801116" visible="true" version="1" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5088542" lon="13.3873122"/>
 <node id="9710833617" visible="true" version="1" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5088516" lon="13.3872770"/>
 <node id="9710833618" visible="true" version="1" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5088448" lon="13.3872465"/>
 <node id="9710833619" visible="true" version="1" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5088332" lon="13.3872133"/>
 <node id="9710833620" visible="true" version="1" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5088167" lon="13.3871815"/>
 <node id="9710833621" visible="true" version="1" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5087946" lon="13.3871563"/>
 <node id="9710833622" visible="true" version="1" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5087679" lon="13.3871379"/>
 <node id="9710833623" visible="true" version="1" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5087532" lon="13.3871352"/>
 <node id="9710833624" visible="true" version="1" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5087312" lon="13.3871339"/>
 <node id="9710833625" visible="true" version="1" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5087115" lon="13.3871372"/>
 <node id="9710833626" visible="true" version="1" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5086471" lon="13.3867684"/>
 <node id="9710833627" visible="true" version="1" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5087022" lon="13.3868043"/>
 <node id="9710833628" visible="true" version="1" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5086926" lon="13.3867912"/>
 <node id="9710833629" visible="true" version="1" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5086923" lon="13.3868224"/>
 <node id="9710833630" visible="true" version="1" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5086492" lon="13.3868030"/>
 <node id="9710833631" visible="true" version="1" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5087273" lon="13.3870799"/>
 <node id="9710833632" visible="true" version="1" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5087108" lon="13.3871154"/>
 <node id="9710833633" visible="true" version="1" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5090688" lon="13.3876530"/>
 <node id="9710833634" visible="true" version="1" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5090658" lon="13.3876622"/>
 <node id="9710833635" visible="true" version="1" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5090685" lon="13.3876448"/>
 <node id="9710833636" visible="true" version="1" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5090665" lon="13.3876307"/>
 <node id="9710833637" visible="true" version="1" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5090616" lon="13.3876247"/>
 <node id="9710833638" visible="true" version="1" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5089899" lon="13.3876666"/>
 <node id="9710833639" visible="true" version="1" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5087169" lon="13.3867577"/>
 <node id="9710833640" visible="true" version="1" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5087023" lon="13.3867605"/>
 <node id="9710833641" visible="true" version="1" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5087166" lon="13.3869914"/>
 <node id="9710833642" visible="true" version="1" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5085007" lon="13.3873871"/>
 <node id="9710833643" visible="true" version="1" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5084726" lon="13.3868382"/>
 <node id="9710833644" visible="true" version="1" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5084520" lon="13.3873927"/>
 <node id="9710833645" visible="true" version="1" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225" lat="52.5087185" lon="13.3873340"/>
 <node id="9887346399" visible="true" version="1" changeset="123610455" timestamp="2022-07-14T13:25:57Z" user="kartonage" uid="1497225" lat="52.5049147" lon="13.3765192"/>
 <node id="10120791461" visible="true" version="1" changeset="127919649" timestamp="2022-10-22T12:10:47Z" user="kjon" uid="44217" lat="52.5040854" lon="13.3723970"/>
 <node id="10343264244" visible="true" version="1" changeset="131064255" timestamp="2023-01-09T16:39:27Z" user="!MRGBoss" uid="8970395" lat="52.5085743" lon="13.3891269"/>
 <node id="10696728474" visible="true" version="1" changeset="133080675" timestamp="2023-02-27T10:19:25Z" user="momabebra" uid="9508237" lat="52.5087801" lon="13.3867249"/>
 <node id="10696728475" visible="true" version="1" changeset="133080675" timestamp="2023-02-27T10:19:25Z" user="momabebra" uid="9508237" lat="52.5085969" lon="13.3857585"/>
 <node id="10696728476" visible="true" version="1" changeset="133080675" timestamp="2023-02-27T10:19:25Z" user="momabebra" uid="9508237" lat="52.5084503" lon="13.3852352">
  <tag k="barrier" v="block"/>
 </node>
 <node id="10696728477" visible="true" version="1" changeset="133080675" timestamp="2023-02-27T10:19:25Z" user="momabebra" uid="9508237" lat="52.5086206" lon="13.3860248"/>
 <node id="10696728480" visible="true" version="1" changeset="133080675" timestamp="2023-02-27T10:19:25Z" user="momabebra" uid="9508237" lat="52.5084337" lon="13.3851500"/>
 <node id="10696728481" visible="true" version="1" changeset="133080675" timestamp="2023-02-27T10:19:25Z" user="momabebra" uid="9508237" lat="52.5085172" lon="13.3855799"/>
 <node id="10696728482" visible="true" version="1" changeset="133080675" timestamp="2023-02-27T10:19:25Z" user="momabebra" uid="9508237" lat="52.5087402" lon="13.3866631">
  <tag k="barrier" v="block"/>
 </node>
 <node id="11302082677" visible="true" version="1" changeset="143414121" timestamp="2023-10-31T10:49:08Z" user="Supaplex030" uid="418040" lat="52.5086303" lon="13.3880632"/>
 <node id="11302082678" visible="true" version="1" changeset="143414121" timestamp="2023-10-31T10:49:08Z" user="Supaplex030" uid="418040" lat="52.5087203" lon="13.3881904"/>
 <node id="11302082679" visible="true" version="1" changeset="143414121" timestamp="2023-10-31T10:49:08Z" user="Supaplex030" uid="418040" lat="52.5088739" lon="13.3882376"/>
 <node id="11302082680" visible="true" version="1" changeset="143414121" timestamp="2023-10-31T10:49:08Z" user="Supaplex030" uid="418040" lat="52.5088610" lon="13.3881921"/>
 <node id="11302082681" visible="true" version="1" changeset="143414121" timestamp="2023-10-31T10:49:08Z" user="Supaplex030" uid="418040" lat="52.5088605" lon="13.3881836"/>
 <node id="11302082682" visible="true" version="1" changeset="143414121" timestamp="2023-10-31T10:49:08Z" user="Supaplex030" uid="418040" lat="52.5089296" lon="13.3885027"/>
 <node id="11302082683" visible="true" version="1" changeset="143414121" timestamp="2023-10-31T10:49:08Z" user="Supaplex030" uid="418040" lat="52.5089670" lon="13.3884614"/>
 <node id="11718266624" visible="true" version="1" changeset="148524008" timestamp="2024-03-11T21:39:49Z" user="PiJu" uid="474817" lat="52.5090673" lon="13.3857053"/>
 <node id="11718266625" visible="true" version="1" changeset="148524008" timestamp="2024-03-11T21:39:49Z" user="PiJu" uid="474817" lat="52.5095945" lon="13.3856403"/>
 <node id="11718266626" visible="true" version="1" changeset="148524008" timestamp="2024-03-11T21:39:49Z" user="PiJu" uid="474817" lat="52.5095987" lon="13.3858794"/>
 <node id="11718266627" visible="true" version="2" changeset="148524036" timestamp="2024-03-11T21:40:45Z" user="PiJu" uid="474817" lat="52.5091205" lon="13.3856988">
  <tag k="access" v="no"/>
  <tag k="barrier" v="full-height_turnstile"/>
 </node>
 <node id="11718266628" visible="true" version="1" changeset="148524008" timestamp="2024-03-11T21:39:49Z" user="PiJu" uid="474817" lat="52.5090924" lon="13.3857033">
  <tag k="access" v="no"/>
  <tag k="barrier" v="gate"/>
  <tag k="locked" v="yes"/>
 </node>
 <way id="40644990" visible="true" version="41" changeset="141661508" timestamp="2023-09-23T21:18:12Z" user="Supaplex030" uid="418040">
  <nd ref="3602509281"/>
  <nd ref="3602509284"/>
  <nd ref="493681827"/>
  <nd ref="9573704527"/>
  <nd ref="1075339135"/>
  <nd ref="492156662"/>
  <nd ref="1075339131"/>
  <nd ref="1075339113"/>
  <nd ref="9182724578"/>
  <nd ref="492156665"/>
  <nd ref="492156670"/>
  <nd ref="7511737969"/>
  <nd ref="1075339106"/>
  <nd ref="1075339140"/>
  <nd ref="6445576040"/>
  <nd ref="492156674"/>
  <nd ref="1075339150"/>
  <nd ref="492156678"/>
  <nd ref="1075339102"/>
  <nd ref="1075481745"/>
  <nd ref="2247733132"/>
  <nd ref="2247733137"/>
  <nd ref="492156680"/>
  <nd ref="2247733133"/>
  <nd ref="1075481754"/>
  <nd ref="1075339110"/>
  <nd ref="1075481759"/>
  <nd ref="492156683"/>
  <nd ref="492156685"/>
  <nd ref="1075481757"/>
  <nd ref="1075481751"/>
  <nd ref="1075339145"/>
  <nd ref="9887346399"/>
  <nd ref="10120791461"/>
  <nd ref="2690299109"/>
  <tag k="cables" v="6"/>
  <tag k="circuits" v="2"/>
  <tag k="depth" v="30"/>
  <tag k="diameter" v="3.0"/>
  <tag k="layer" v="-5"/>
  <tag k="location" v="underground"/>
  <tag k="material" v="concrete"/>
  <tag k="name" v="380-kV-Transversale Berlin"/>
  <tag k="operator" v="50Hertz Transmission GmbH"/>
  <tag k="power" v="cable"/>
  <tag k="ref" v="919;920"/>
  <tag k="start_date" v="1978"/>
  <tag k="tunnel" v="yes"/>
  <tag k="voltage" v="380000"/>
  <tag k="wikipedia" v="de:380-kV-Transversale Berlin"/>
 </way>
 <way id="43326015" visible="true" version="9" changeset="148524008" timestamp="2024-03-11T21:39:49Z" user="PiJu" uid="474817">
  <nd ref="544516780"/>
  <nd ref="544516782"/>
  <nd ref="544516785"/>
  <nd ref="544516739"/>
  <nd ref="5246291333"/>
  <nd ref="5246291332"/>
  <nd ref="544516742"/>
  <nd ref="5246291331"/>
  <nd ref="544516743"/>
  <nd ref="5246291330"/>
  <nd ref="5246291329"/>
  <nd ref="5246291328"/>
  <nd ref="544516745"/>
  <nd ref="5246291327"/>
  <nd ref="544516747"/>
  <nd ref="5246291317"/>
  <nd ref="5246291318"/>
  <nd ref="5246291319"/>
  <nd ref="5246291320"/>
  <nd ref="5246291321"/>
  <nd ref="5246291322"/>
  <nd ref="544516250"/>
  <nd ref="5246291323"/>
  <nd ref="544516253"/>
  <nd ref="5246291316"/>
  <nd ref="5246291315"/>
  <nd ref="5246291314"/>
  <nd ref="544516255"/>
  <nd ref="5246291313"/>
  <nd ref="6539520637"/>
  <nd ref="5246291312"/>
  <nd ref="544516258"/>
  <nd ref="5246291311"/>
  <nd ref="5246291310"/>
  <nd ref="544516262"/>
  <nd ref="5246291309"/>
  <nd ref="6539537171"/>
  <nd ref="6539537174"/>
  <nd ref="544516266"/>
  <nd ref="3345707089"/>
  <nd ref="544516230"/>
  <nd ref="544516233"/>
  <nd ref="544516237"/>
  <nd ref="5246291308"/>
  <nd ref="5246291307"/>
  <nd ref="544516772"/>
  <nd ref="544516774"/>
  <nd ref="544516775"/>
  <nd ref="11718266626"/>
  <nd ref="544516777"/>
  <nd ref="544516780"/>
 </way>
 <way id="46096303" visible="true" version="5" changeset="80794975" timestamp="2020-02-10T12:18:56Z" user="PiJu" uid="474817">
  <nd ref="587629341"/>
  <nd ref="587629303"/>
  <nd ref="587629301"/>
  <nd ref="5327026077"/>
  <nd ref="5327026076"/>
  <nd ref="587629306"/>
  <nd ref="587629302"/>
  <nd ref="5327026078"/>
  <nd ref="5327026079"/>
  <nd ref="587629304"/>
  <nd ref="587629300"/>
  <nd ref="587629305"/>
  <nd ref="587629349"/>
  <nd ref="5327026074"/>
  <nd ref="5327026075"/>
  <nd ref="587629299"/>
  <nd ref="587629350"/>
  <nd ref="587629348"/>
  <nd ref="587629341"/>
  <tag k="building" v="apartments"/>
  <tag k="building:levels" v="5"/>
  <tag k="roof:levels" v="1"/>
 </way>
 <way id="46096306" visible="true" version="6" changeset="113745015" timestamp="2021-11-13T20:56:13Z" user="kjon" uid="44217">
  <nd ref="587629348"/>
  <nd ref="587629350"/>
  <nd ref="611603876"/>
  <nd ref="587629307"/>
  <nd ref="587629345"/>
  <nd ref="587629357"/>
  <nd ref="587629355"/>
  <nd ref="587629352"/>
  <nd ref="587629351"/>
  <nd ref="587629348"/>
  <tag k="building" v="apartments"/>
  <tag k="building:levels" v="5"/>
  <tag k="roof:levels" v="1"/>
 </way>
 <way id="46096321" visible="true" version="13" changeset="147000196" timestamp="2024-02-02T20:37:57Z" user="wheelmap_visitor" uid="290680">
  <nd ref="587629338"/>
  <nd ref="587629337"/>
  <nd ref="587629339"/>
  <nd ref="9249094043"/>
  <nd ref="5327026085"/>
  <nd ref="11302082679"/>
  <nd ref="11302082680"/>
  <nd ref="11302082681"/>
  <nd ref="9249094042"/>
  <nd ref="5327026084"/>
  <nd ref="5327026083"/>
  <nd ref="11302082678"/>
  <nd ref="587629296"/>
  <nd ref="11302082677"/>
  <nd ref="587629298"/>
  <nd ref="587629303"/>
  <nd ref="587629341"/>
  <nd ref="11302082683"/>
  <nd ref="11302082682"/>
  <nd ref="587629338"/>
  <tag k="addr:city" v="Berlin"/>
  <tag k="addr:country" v="DE"/>
  <tag k="addr:housenumber" v="81-82"/>
  <tag k="addr:postcode" v="10117"/>
  <tag k="addr:street" v="Mauerstra√üe"/>
  <tag k="addr:suburb" v="Mitte"/>
  <tag k="building" v="yes"/>
  <tag k="name" v="Gat Point Charlie"/>
  <tag k="rooms" v="145"/>
  <tag k="toilets:wheelchair" v="yes"/>
  <tag k="tourism" v="hotel"/>
  <tag k="website" v="http://www.gatrooms.de/en/hotel-gat-point-charlie/h3/"/>
  <tag k="wheelchair" v="yes"/>
  <tag k="wikidata" v="Q111387941"/>
 </way>
 <way id="48118895" visible="true" version="8" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225">
  <nd ref="611603874"/>
  <nd ref="587629307"/>
  <nd ref="611603876"/>
  <nd ref="9249094036"/>
  <nd ref="9710833634"/>
  <nd ref="9710833633"/>
  <nd ref="9710833635"/>
  <nd ref="9710833636"/>
  <nd ref="9710833637"/>
  <nd ref="9249094035"/>
  <nd ref="9249094040"/>
  <nd ref="9249094041"/>
  <nd ref="9710833638"/>
  <nd ref="611603877"/>
  <nd ref="9249094037"/>
  <nd ref="9249094039"/>
  <nd ref="9249094038"/>
  <nd ref="611603878"/>
  <nd ref="611603879"/>
  <nd ref="611605329"/>
  <nd ref="611605332"/>
  <nd ref="9710801108"/>
  <nd ref="611603881"/>
  <nd ref="951271293"/>
  <nd ref="611603874"/>
  <tag k="building" v="apartments"/>
  <tag k="building:levels" v="7"/>
 </way>
 <way id="48118905" visible="true" version="19" changeset="140998469" timestamp="2023-09-08T18:28:49Z" user="tg4567" uid="12500589">
  <nd ref="611604494"/>
  <nd ref="9710833626"/>
  <nd ref="9710833630"/>
  <nd ref="611655192"/>
  <nd ref="5643775335"/>
  <nd ref="5643775336"/>
  <nd ref="611604502"/>
  <nd ref="9710833643"/>
  <nd ref="9710833642"/>
  <nd ref="9710833644"/>
  <nd ref="611604505"/>
  <nd ref="611604508"/>
  <nd ref="611605338"/>
  <nd ref="5643775337"/>
  <nd ref="9710833645"/>
  <nd ref="9710801111"/>
  <nd ref="9710833625"/>
  <nd ref="9710833632"/>
  <nd ref="9710833631"/>
  <nd ref="951271309"/>
  <nd ref="9710833629"/>
  <nd ref="9710833627"/>
  <nd ref="9710833628"/>
  <nd ref="611604494"/>
  <tag k="addr:city" v="Berlin"/>
  <tag k="addr:country" v="DE"/>
  <tag k="addr:housenumber" v="79"/>
  <tag k="addr:postcode" v="10117"/>
  <tag k="addr:street" v="Mauerstra√üe"/>
  <tag k="addr:suburb" v="Mitte"/>
  <tag k="building" v="residential"/>
  <tag k="building:levels" v="9"/>
  <tag k="name" v="ewerk"/>
  <tag k="old_name" v="Kraftwerk Mauerstra√üe"/>
  <tag k="website" v="https://ewerk.net/"/>
  <tag k="wheelchair" v="yes"/>
  <tag k="wheelchair:description" v="Geb√§ude mit B√ºror√§umen, die alle per Aufzug ohne weitere Stufen erreichbar sind."/>
  <tag k="wikidata" v="Q325230"/>
  <tag k="wikimedia_commons" v="Category:Abspannwerk Buchh√§ndlerhof"/>
  <tag k="wikipedia" v="de:E-Werk (Berlin)"/>
 </way>
 <way id="48118909" visible="true" version="4" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225">
  <nd ref="611604508"/>
  <nd ref="611605327"/>
  <nd ref="9710801107"/>
  <nd ref="611605329"/>
  <nd ref="611605332"/>
  <nd ref="9710801106"/>
  <nd ref="9710801115"/>
  <nd ref="611605335"/>
  <nd ref="9710801114"/>
  <nd ref="5643775337"/>
  <nd ref="611605338"/>
  <nd ref="611604508"/>
  <tag k="building" v="residential"/>
 </way>
 <way id="48124339" visible="true" version="7" changeset="77250152" timestamp="2019-11-18T23:09:36Z" user="RoterEmil" uid="4179530">
  <nd ref="611656869"/>
  <nd ref="6988473428"/>
  <nd ref="611661447"/>
  <nd ref="611656872"/>
  <nd ref="611656869"/>
  <tag k="building" v="apartments"/>
 </way>
 <way id="48124929" visible="true" version="23" changeset="148524008" timestamp="2024-03-11T21:39:49Z" user="PiJu" uid="474817">
  <nd ref="544516775"/>
  <nd ref="11718266626"/>
  <nd ref="544516777"/>
  <nd ref="544516785"/>
  <nd ref="544516739"/>
  <nd ref="611661458"/>
  <nd ref="611605928"/>
  <nd ref="611605917"/>
  <nd ref="5643775335"/>
  <nd ref="5643775336"/>
  <nd ref="611604502"/>
  <nd ref="9249094033"/>
  <nd ref="611656871"/>
  <nd ref="611656825"/>
  <nd ref="6546360903"/>
  <nd ref="611656826"/>
  <nd ref="611658334"/>
  <nd ref="611658339"/>
  <nd ref="1609970609"/>
  <nd ref="611658343"/>
  <nd ref="611657553"/>
  <nd ref="6515398507"/>
  <nd ref="2990843334"/>
  <nd ref="587629342"/>
  <nd ref="10343264244"/>
  <nd ref="587629343"/>
  <nd ref="587629335"/>
  <nd ref="9698968069"/>
  <nd ref="587629338"/>
  <nd ref="11302082682"/>
  <nd ref="11302082683"/>
  <nd ref="587629341"/>
  <nd ref="587629348"/>
  <nd ref="587629351"/>
  <nd ref="6539518433"/>
  <nd ref="544516747"/>
  <nd ref="5246291317"/>
  <nd ref="5246291318"/>
  <nd ref="5246291319"/>
  <nd ref="5246291320"/>
  <nd ref="5246291321"/>
  <nd ref="5246291322"/>
  <nd ref="544516250"/>
  <nd ref="5246291323"/>
  <nd ref="544516253"/>
  <nd ref="5246291316"/>
  <nd ref="5246291315"/>
  <nd ref="5246291314"/>
  <nd ref="544516255"/>
  <nd ref="5246291313"/>
  <nd ref="6539520637"/>
  <nd ref="5246291312"/>
  <nd ref="544516258"/>
  <nd ref="5246291311"/>
  <nd ref="5246291310"/>
  <nd ref="544516262"/>
  <nd ref="5246291309"/>
  <nd ref="6539537171"/>
  <nd ref="6539537174"/>
  <nd ref="544516266"/>
  <nd ref="1985867576"/>
  <nd ref="544516775"/>
  <tag k="landuse" v="commercial"/>
 </way>
 <way id="67850222" visible="true" version="3" changeset="133080675" timestamp="2023-02-27T10:19:25Z" user="momabebra" uid="9508237">
  <nd ref="819148943"/>
  <nd ref="819148948"/>
  <nd ref="819148952"/>
  <nd ref="819148956"/>
  <nd ref="6988473427"/>
  <tag k="access" v="private"/>
  <tag k="highway" v="service"/>
 </way>
 <way id="81611249" visible="true" version="6" changeset="133080675" timestamp="2023-02-27T10:19:25Z" user="momabebra" uid="9508237">
  <nd ref="9710833640"/>
  <nd ref="9710833639"/>
  <nd ref="10696728474"/>
  <nd ref="951271335"/>
  <nd ref="951271293"/>
  <nd ref="611603881"/>
  <nd ref="9710801108"/>
  <nd ref="9710801109"/>
  <nd ref="9710801110"/>
  <nd ref="9710833641"/>
  <nd ref="9710833640"/>
  <tag k="addr:city" v="Berlin"/>
  <tag k="addr:country" v="DE"/>
  <tag k="addr:housenumber" v="79"/>
  <tag k="addr:postcode" v="10117"/>
  <tag k="addr:street" v="Mauerstra√üe"/>
  <tag k="addr:suburb" v="Mitte"/>
  <tag k="location" v="underground"/>
  <tag k="name" v="U-Bahn Gleichrichterwerk Mauerstra√üe"/>
  <tag k="operator" v="Berliner Verkehrsbetriebe"/>
  <tag k="operator:wikidata" v="Q99633"/>
  <tag k="power" v="transformer"/>
  <tag k="source" v="survey"/>
  <tag k="voltage:primary" v="10000"/>
  <tag k="voltage:secondary" v="750"/>
 </way>
 <way id="242342877" visible="true" version="5" changeset="71069307" timestamp="2019-06-09T11:44:32Z" user="schoschi" uid="231006">
  <nd ref="611604502"/>
  <nd ref="5643775336"/>
  <nd ref="611605917"/>
  <nd ref="2498327694"/>
  <nd ref="4795634779"/>
  <nd ref="2498327700"/>
  <nd ref="2498327702"/>
  <tag k="barrier" v="fence"/>
  <tag k="fence_type" v="wire"/>
  <tag k="height" v="2"/>
 </way>
 <way id="487042994" visible="true" version="1" changeset="47822663" timestamp="2017-04-15T19:22:03Z" user="RoterEmil" uid="4179530">
  <nd ref="4795634800"/>
  <nd ref="4795634793"/>
  <nd ref="611604502"/>
  <tag k="barrier" v="fence"/>
 </way>
 <way id="591200184" visible="true" version="5" changeset="142300458" timestamp="2023-10-08T11:22:29Z" user="J-MUC" uid="4238158">
  <nd ref="4563373790"/>
  <nd ref="611655940"/>
  <nd ref="4795634794"/>
  <nd ref="4795634804"/>
  <nd ref="4795634803"/>
  <nd ref="4795634801"/>
  <nd ref="5643775334"/>
  <nd ref="4795634800"/>
  <nd ref="4795634793"/>
  <nd ref="611604502"/>
  <nd ref="5643775336"/>
  <nd ref="611605917"/>
  <nd ref="2498327694"/>
  <nd ref="4795634779"/>
  <nd ref="2498327700"/>
  <nd ref="2498327702"/>
  <nd ref="4795634785"/>
  <nd ref="611655949"/>
  <nd ref="611655951"/>
  <nd ref="611655952"/>
  <nd ref="3790683855"/>
  <nd ref="611655925"/>
  <nd ref="611655927"/>
  <nd ref="611655928"/>
  <nd ref="611655930"/>
  <nd ref="611655931"/>
  <nd ref="2498327725"/>
  <nd ref="611655932"/>
  <nd ref="611655934"/>
  <nd ref="611655935"/>
  <nd ref="2498327735"/>
  <nd ref="611655936"/>
  <nd ref="4563373790"/>
  <tag k="addr:city" v="Berlin"/>
  <tag k="addr:housenumber" v="14-15"/>
  <tag k="addr:street" v="Zimmerstra√üe"/>
  <tag k="charge" v="5 EUR"/>
  <tag k="fee" v="yes"/>
  <tag k="name" v="Trabi Museum"/>
  <tag k="opening_hours" v="Mo-Su 10:00-18:00"/>
  <tag k="tourism" v="museum"/>
  <tag k="website" v="https://www.trabi-world.com/"/>
  <tag k="wheelchair" v="yes"/>
 </way>
 <way id="746805483" visible="true" version="3" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225">
  <nd ref="587629295"/>
  <nd ref="9710801103"/>
  <nd ref="6988473433"/>
  <nd ref="9710801101"/>
  <nd ref="9710801102"/>
  <nd ref="6988473432"/>
  <nd ref="611656833"/>
  <nd ref="611656829"/>
  <nd ref="6988473430"/>
  <nd ref="6988473429"/>
  <nd ref="587629294"/>
  <nd ref="587629295"/>
  <tag k="building" v="yes"/>
 </way>
 <way id="874988991" visible="true" version="6" changeset="144719711" timestamp="2023-12-03T12:27:51Z" user="StefanHRT" uid="10961311">
  <nd ref="8144770844"/>
  <nd ref="9249094044"/>
  <nd ref="8144770849"/>
  <nd ref="9249094052"/>
  <nd ref="8144770852"/>
  <nd ref="8144770854"/>
  <nd ref="8144770855"/>
  <nd ref="8144770857"/>
  <nd ref="9249094046"/>
  <nd ref="8144770867"/>
  <nd ref="9249094030"/>
  <nd ref="8144770868"/>
  <nd ref="9249094031"/>
  <nd ref="9249094032"/>
  <tag k="bicycle" v="destination"/>
  <tag k="highway" v="footway"/>
  <tag k="lit" v="yes"/>
 </way>
 <way id="1002132814" visible="true" version="5" changeset="147123931" timestamp="2024-02-06T08:23:21Z" user="Lumbricus badensis" uid="18633568">
  <nd ref="9249094044"/>
  <nd ref="9249094045"/>
  <tag k="highway" v="footway"/>
  <tag k="lit" v="yes"/>
  <tag k="surface" v="asphalt"/>
 </way>
 <way id="1002132815" visible="true" version="3" changeset="128865722" timestamp="2022-11-13T23:23:51Z" user="thom_bike_bln" uid="4974073">
  <nd ref="9249094030"/>
  <nd ref="9249094047"/>
  <nd ref="9249094032"/>
  <tag k="highway" v="footway"/>
  <tag k="lit" v="yes"/>
 </way>
 <way id="1002132816" visible="true" version="4" changeset="128865722" timestamp="2022-11-13T23:23:53Z" user="thom_bike_bln" uid="4974073">
  <nd ref="8144770868"/>
  <nd ref="9249094048"/>
  <nd ref="9491269598"/>
  <nd ref="9249094049"/>
  <tag k="highway" v="footway"/>
  <tag k="lit" v="yes"/>
 </way>
 <way id="1029477570" visible="true" version="2" changeset="128865722" timestamp="2022-11-13T23:23:45Z" user="thom_bike_bln" uid="4974073">
  <nd ref="9249094045"/>
  <nd ref="8144770867"/>
  <tag k="bicycle" v="destination"/>
  <tag k="highway" v="footway"/>
  <tag k="lit" v="yes"/>
 </way>
 <way id="1029477571" visible="true" version="1" changeset="117183504" timestamp="2022-02-09T03:48:07Z" user="StefanHRT" uid="10961311">
  <nd ref="9491269599"/>
  <nd ref="9491269600"/>
  <nd ref="9491269601"/>
  <nd ref="9491269602"/>
  <nd ref="9491269599"/>
  <tag k="access" v="private"/>
  <tag k="amenity" v="bicycle_parking"/>
  <tag k="covered" v="no"/>
 </way>
 <way id="1029477572" visible="true" version="2" changeset="128865722" timestamp="2022-11-13T23:23:56Z" user="thom_bike_bln" uid="4974073">
  <nd ref="9249094032"/>
  <nd ref="9491269603"/>
  <nd ref="9491269604"/>
  <tag k="highway" v="footway"/>
  <tag k="lit" v="yes"/>
 </way>
 <way id="1056820804" visible="true" version="1" changeset="120489817" timestamp="2022-05-03T07:56:12Z" user="kartonage" uid="1497225">
  <nd ref="9710801115"/>
  <nd ref="611605327"/>
  <nd ref="9710801107"/>
  <nd ref="9710801106"/>
  <nd ref="9710801115"/>
  <tag k="building:min_level" v="1"/>
  <tag k="building:part" v="yes"/>
  <tag k="layer" v="1"/>
 </way>
 <way id="1056820805" visible="true" version="2" changeset="144821423" timestamp="2023-12-06T09:43:36Z" user="Uwe_Sand" uid="16850657">
  <nd ref="9710833625"/>
  <nd ref="9710833624"/>
  <nd ref="9710833623"/>
  <nd ref="9710833622"/>
  <nd ref="9710833621"/>
  <nd ref="9710833620"/>
  <nd ref="9710833619"/>
  <nd ref="9710833618"/>
  <nd ref="9710833617"/>
  <nd ref="9710801116"/>
  <nd ref="9710801115"/>
  <nd ref="611605335"/>
  <nd ref="9710801114"/>
  <nd ref="9710801113"/>
  <nd ref="9710801112"/>
  <nd ref="9710801111"/>
  <nd ref="9710833625"/>
  <tag k="addr:city" v="Berlin"/>
  <tag k="addr:housenumber" v="43"/>
  <tag k="addr:postcode" v="10117"/>
  <tag k="addr:street" v="Wilhelmstra√üe"/>
  <tag k="architect" v="Hans Heinrich M√ºller"/>
  <tag k="building" v="yes"/>
  <tag k="building:architecture" v="Klinkerexpressionismus"/>
  <tag k="name" v="E-Werk"/>
  <tag k="old_name" v="Umspannwerk Buchh√§ndlerhof"/>
  <tag k="start_date" v="1928"/>
  <tag k="wikidata" v="Q325230"/>
  <tag k="wikimedia_commons" v="Category:Abspannwerk_Buchh√§ndlerhof"/>
  <tag k="wikipedia" v="de:E-Werk (Berlin)"/>
 </way>
 <way id="1149854315" visible="true" version="2" changeset="148524008" timestamp="2024-03-11T21:39:49Z" user="PiJu" uid="474817">
  <nd ref="11718266626"/>
  <nd ref="11718266625"/>
  <nd ref="11718266627"/>
  <nd ref="11718266628"/>
  <nd ref="11718266624"/>
  <nd ref="1480406625"/>
  <nd ref="10696728475"/>
  <nd ref="10696728474"/>
  <nd ref="951271335"/>
  <nd ref="951271293"/>
  <tag k="barrier" v="fence"/>
 </way>
 <way id="1149854316" visible="true" version="1" changeset="133080675" timestamp="2023-02-27T10:19:25Z" user="momabebra" uid="9508237">
  <nd ref="10696728482"/>
  <nd ref="10696728477"/>
  <nd ref="10696728481"/>
  <nd ref="10696728476"/>
  <nd ref="10696728480"/>
  <tag k="access" v="private"/>
  <tag k="highway" v="service"/>
 </way>
 <relation id="318560" visible="true" version="8" changeset="136724339" timestamp="2023-05-30T04:42:59Z" user="Aleks-Berlin" uid="85218">
  <member type="way" ref="43326015" role="outer"/>
  <member type="way" ref="44098878" role="inner"/>
  <member type="way" ref="44098877" role="inner"/>
  <member type="way" ref="44098876" role="inner"/>
  <tag k="addr:housenumber" v="75"/>
  <tag k="addr:postcode" v="10117"/>
  <tag k="addr:street" v="Mauerstra√üe"/>
  <tag k="architect" v="Ernst Hake;Heinrich Techo;Franz Ahrens"/>
  <tag k="building" v="government"/>
  <tag k="building:architecture" v="neo-baroque"/>
  <tag k="building:levels" v="4"/>
  <tag k="fixme" v="Geb√§ude baulich richtig aufteilen und dann building=office f√ºr das Ministerium und building=civic f√ºr das Museum verwendet werden."/>
  <tag k="heritage" v="4"/>
  <tag k="loc_name" v="Post-Kolosseum"/>
  <tag k="museum" v="technology"/>
  <tag k="old_name" v="Reichspostministerium"/>
  <tag k="start_date" v="1872"/>
  <tag k="tourism" v="museum"/>
  <tag k="type" v="multipolygon"/>
  <tag k="wikipedia" v="de:Museum f√ºr Kommunikation Berlin"/>
 </relation>
 <relation id="3749524" visible="true" version="6" changeset="116500427" timestamp="2022-01-23T13:57:46Z" user="kjon" uid="44217">
  <member type="way" ref="30303506" role="substation"/>
  <member type="way" ref="40644990" role="cable"/>
  <member type="way" ref="30954714" role="substation"/>
  <tag k="cables" v="3"/>
  <tag k="from" v="Berlin/Mitte"/>
  <tag k="name" v="919 Berlin Mitte - Friedrichshain"/>
  <tag k="operator" v="50Hertz Transmission"/>
  <tag k="operator:wikidata" v="Q241331"/>
  <tag k="operator:wikipedia" v="de:50Hertz Transmission"/>
  <tag k="ref" v="919"/>
  <tag k="route" v="power"/>
  <tag k="to" v="Friedrichshain"/>
  <tag k="type" v="route"/>
  <tag k="voltage" v="380000"/>
 </relation>
 <relation id="6660825" visible="true" version="5" changeset="125007030" timestamp="2022-08-17T09:02:13Z" user="kartonage" uid="1497225">
  <member type="way" ref="48118909" role=""/>
  <member type="way" ref="48118895" role=""/>
  <member type="way" ref="48118905" role=""/>
  <member type="way" ref="1056820805" role=""/>
  <tag k="architect" v="Hans Heinrich M√ºller"/>
  <tag k="heritage" v="4"/>
  <tag k="heritage:operator" v="lda"/>
  <tag k="heritage:website" v="https://denkmaldatenbank.berlin.de/daobj.php?obj_dok_nr=09030046"/>
  <tag k="lda:criteria" v="Baudenkmal"/>
  <tag k="ref:lda" v="09030046"/>
  <tag k="start_date" v="1885..1886"/>
  <tag k="type" v="site"/>
  <tag k="wikidata" v="Q325230"/>
  <tag k="wikimedia_commons" v="File:Berlin, Mitte, Mauerstra√üe, E-Werk 01.jpg"/>
  <tag k="wikipedia" v="de:E-Werk (Berlin)"/>
 </relation>
 <relation id="8539151" visible="true" version="2" changeset="116500427" timestamp="2022-01-23T13:57:46Z" user="kjon" uid="44217">
  <member type="way" ref="30303506" role="substation"/>
  <member type="way" ref="40644990" role="cable"/>
  <member type="way" ref="30954714" role="substation"/>
  <tag k="cables" v="3"/>
  <tag k="frequency" v="50"/>
  <tag k="from" v="Berlin/Mitte"/>
  <tag k="name" v="920 Berlin Mitte - Friedrichshain"/>
  <tag k="operator" v="50Hertz Transmission"/>
  <tag k="operator:wikidata" v="Q241331"/>
  <tag k="operator:wikipedia" v="de:50Hertz Transmission"/>
  <tag k="ref" v="920"/>
  <tag k="route" v="power"/>
  <tag k="to" v="Friedrichshain"/>
  <tag k="type" v="route"/>
  <tag k="voltage" v="380000"/>
 </relation>
</osm>


File: /prettymapp/fonts/PermanentMarker-Regular.ttf
Content: Skipped binary file

File: /cache/780fe2ff6b54825f63e8b115e722062185c473f3.json
Content:
[{"place_id": 308376577, "licence": "Data \u00a9 OpenStreetMap contributors, ODbL 1.0. http://osm.org/copyright", "osm_type": "relation", "osm_id": 3745348, "lat": "52.6461393", "lon": "4.8068092", "class": "place", "type": "quarter", "place_rank": 20, "importance": 0.17461773632832445, "addresstype": "quarter", "name": "Stad van de Zon", "display_name": "Stad van de Zon, Heerhugowaard, Dijk en Waard, North Holland, Netherlands", "boundingbox": ["52.6338622", "52.6572279", "4.7852790", "4.8181238"]}]

File: /cache/850ec9abdfe570102b64096e5baf2adf37367c43.json
Content:
[{"place_id": 224538758, "licence": "Data \u00a9 OpenStreetMap contributors, ODbL 1.0. http://osm.org/copyright", "osm_type": "way", "osm_id": 548216842, "lat": "49.79415975", "lon": "9.931866695773225", "class": "building", "type": "presbytery", "place_rank": 30, "importance": 9.99999999995449e-06, "addresstype": "building", "name": "", "display_name": "4, Martinstra\u00dfe, W\u00fcrzburg Altstadt, W\u00fcrzburg, Bavaria, 97070, Germany", "boundingbox": ["49.7940315", "49.7942233", "9.9317824", "9.9319600"]}]

File: /cache/8b188ec8ba03be56310ff28eef9a9037a043769b.json
Content:
[{"place_id": 181218643, "licence": "Data \u00a9 OpenStreetMap contributors, ODbL 1.0. http://osm.org/copyright", "osm_type": "way", "osm_id": 304693485, "lat": "41.3944066", "lon": "2.1755048", "class": "highway", "type": "primary", "place_rank": 26, "importance": 0.36191270876321846, "addresstype": "road", "name": "Pla\u00e7a de Tetuan", "display_name": "Pla\u00e7a de Tetuan, la Dreta de l'Eixample, Eixample, Barcelona, Barcelon\u00e8s, Barcelona, Catalonia, 08001, Spain", "boundingbox": ["41.3944066", "41.3944226", "2.1753344", "2.1756903"]}]

File: /cache/9cd270ab9065bc11586e724193305eb3f884115c.json
Content:
[{"place_id": 77795182, "licence": "Data \u00a9 OpenStreetMap contributors, ODbL 1.0. http://osm.org/copyright", "osm_type": "node", "osm_id": 7474858437, "lat": "22.1891455", "lon": "113.5432748", "class": "amenity", "type": "bus_station", "place_rank": 30, "importance": 9.99999999995449e-06, "addresstype": "amenity", "name": "\u4e9e\u99ac\u5587\u524d\u5730 Pra\u00e7a Ferreira Amaral.", "display_name": "\u4e9e\u99ac\u5587\u524d\u5730 Pra\u00e7a Ferreira Amaral., \u4e9e\u99ac\u5587\u524d\u5730 Pra\u00e7a de Ferreira do Amaral, \u65b0\u53e3\u5cb8\u586b\u6d77\u5340 Zona de Aterros do Porto Exterior, Grand Beach, S\u00e9, Municipality of Macau, Macau, 519020, China", "boundingbox": ["22.1890955", "22.1891955", "113.5432248", "113.5433248"]}]

File: /.streamlit/config.toml
Content:
[theme]
base="dark"

